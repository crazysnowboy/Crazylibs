# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyCrazyCPP', [dirname(__file__)])
        except ImportError:
            import _pyCrazyCPP
            return _pyCrazyCPP
        if fp is not None:
            try:
                _mod = imp.load_module('_pyCrazyCPP', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyCrazyCPP = swig_import_helper()
    del swig_import_helper
else:
    import _pyCrazyCPP
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def NumpyData_Python2CPP(mat, DMat):
    return _pyCrazyCPP.NumpyData_Python2CPP(mat, DMat)
NumpyData_Python2CPP = _pyCrazyCPP.NumpyData_Python2CPP

def Image_Python2CPP(mat, c, ImageMat):
    return _pyCrazyCPP.Image_Python2CPP(mat, c, ImageMat)
Image_Python2CPP = _pyCrazyCPP.Image_Python2CPP
class IMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyCrazyCPP.new_IMatrix(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_IMatrix
    __del__ = lambda self: None

    def Create(self, *args):
        return _pyCrazyCPP.IMatrix_Create(self, *args)

    def Set(self, r, c, v):
        return _pyCrazyCPP.IMatrix_Set(self, r, c, v)

    def Get(self, r, c):
        return _pyCrazyCPP.IMatrix_Get(self, r, c)
IMatrix_swigregister = _pyCrazyCPP.IMatrix_swigregister
IMatrix_swigregister(IMatrix)

class FMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyCrazyCPP.new_FMatrix(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_FMatrix
    __del__ = lambda self: None

    def Create(self, *args):
        return _pyCrazyCPP.FMatrix_Create(self, *args)

    def Set(self, r, c, v):
        return _pyCrazyCPP.FMatrix_Set(self, r, c, v)

    def Get(self, r, c):
        return _pyCrazyCPP.FMatrix_Get(self, r, c)
FMatrix_swigregister = _pyCrazyCPP.FMatrix_swigregister
FMatrix_swigregister(FMatrix)

class DMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyCrazyCPP.new_DMatrix(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_DMatrix
    __del__ = lambda self: None

    def Create(self, *args):
        return _pyCrazyCPP.DMatrix_Create(self, *args)

    def Set(self, r, c, v):
        return _pyCrazyCPP.DMatrix_Set(self, r, c, v)

    def Get(self, r, c):
        return _pyCrazyCPP.DMatrix_Get(self, r, c)
DMatrix_swigregister = _pyCrazyCPP.DMatrix_swigregister
DMatrix_swigregister(DMatrix)

class ImageMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyCrazyCPP.new_ImageMatrix(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_ImageMatrix
    __del__ = lambda self: None

    def Create(self, *args):
        return _pyCrazyCPP.ImageMatrix_Create(self, *args)

    def Set(self, r, c, channels_n, v):
        return _pyCrazyCPP.ImageMatrix_Set(self, r, c, channels_n, v)

    def Get(self, r, c, channels_n):
        return _pyCrazyCPP.ImageMatrix_Get(self, r, c, channels_n)

    def rows(self):
        return _pyCrazyCPP.ImageMatrix_rows(self)

    def cols(self):
        return _pyCrazyCPP.ImageMatrix_cols(self)

    def chanels(self):
        return _pyCrazyCPP.ImageMatrix_chanels(self)
ImageMatrix_swigregister = _pyCrazyCPP.ImageMatrix_swigregister
ImageMatrix_swigregister(ImageMatrix)


_pyCrazyCPP.ErrorMode_StdRuntimeError_swigconstant(_pyCrazyCPP)
ErrorMode_StdRuntimeError = _pyCrazyCPP.ErrorMode_StdRuntimeError

_pyCrazyCPP.ErrorMode_FileLogging_swigconstant(_pyCrazyCPP)
ErrorMode_FileLogging = _pyCrazyCPP.ErrorMode_FileLogging

_pyCrazyCPP.ErrorMode_StdCerr_swigconstant(_pyCrazyCPP)
ErrorMode_StdCerr = _pyCrazyCPP.ErrorMode_StdCerr

_pyCrazyCPP.ErrorMode_All_swigconstant(_pyCrazyCPP)
ErrorMode_All = _pyCrazyCPP.ErrorMode_All

_pyCrazyCPP.LogMode_FileLogging_swigconstant(_pyCrazyCPP)
LogMode_FileLogging = _pyCrazyCPP.LogMode_FileLogging

_pyCrazyCPP.LogMode_StdCout_swigconstant(_pyCrazyCPP)
LogMode_StdCout = _pyCrazyCPP.LogMode_StdCout

_pyCrazyCPP.LogMode_All_swigconstant(_pyCrazyCPP)
LogMode_All = _pyCrazyCPP.LogMode_All

_pyCrazyCPP.Priority__None_swigconstant(_pyCrazyCPP)
Priority__None = _pyCrazyCPP.Priority__None

_pyCrazyCPP.Priority_Low_swigconstant(_pyCrazyCPP)
Priority_Low = _pyCrazyCPP.Priority_Low

_pyCrazyCPP.Priority_Normal_swigconstant(_pyCrazyCPP)
Priority_Normal = _pyCrazyCPP.Priority_Normal

_pyCrazyCPP.Priority_High_swigconstant(_pyCrazyCPP)
Priority_High = _pyCrazyCPP.Priority_High

_pyCrazyCPP.Priority_Max_swigconstant(_pyCrazyCPP)
Priority_Max = _pyCrazyCPP.Priority_Max

_pyCrazyCPP.Priority_NoOutput_swigconstant(_pyCrazyCPP)
Priority_NoOutput = _pyCrazyCPP.Priority_NoOutput

_pyCrazyCPP.DataFormat_Json_swigconstant(_pyCrazyCPP)
DataFormat_Json = _pyCrazyCPP.DataFormat_Json

_pyCrazyCPP.DataFormat_Xml_swigconstant(_pyCrazyCPP)
DataFormat_Xml = _pyCrazyCPP.DataFormat_Xml

_pyCrazyCPP.DataFormat_Yaml_swigconstant(_pyCrazyCPP)
DataFormat_Yaml = _pyCrazyCPP.DataFormat_Yaml

_pyCrazyCPP.DataFormat_Yml_swigconstant(_pyCrazyCPP)
DataFormat_Yml = _pyCrazyCPP.DataFormat_Yml

def getTime():
    return _pyCrazyCPP.getTime()
getTime = _pyCrazyCPP.getTime

def error(*args):
    return _pyCrazyCPP.error(*args)
error = _pyCrazyCPP.error

def log(*args):
    return _pyCrazyCPP.log(*args)
log = _pyCrazyCPP.log
class ConfigureError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigureError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigureError, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getErrorModes"] = lambda x: _pyCrazyCPP.ConfigureError_getErrorModes
    if _newclass:
        getErrorModes = staticmethod(_pyCrazyCPP.ConfigureError_getErrorModes)
    __swig_getmethods__["setErrorModes"] = lambda x: _pyCrazyCPP.ConfigureError_setErrorModes
    if _newclass:
        setErrorModes = staticmethod(_pyCrazyCPP.ConfigureError_setErrorModes)

    def __init__(self):
        this = _pyCrazyCPP.new_ConfigureError()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_ConfigureError
    __del__ = lambda self: None
ConfigureError_swigregister = _pyCrazyCPP.ConfigureError_swigregister
ConfigureError_swigregister(ConfigureError)

def ConfigureError_getErrorModes():
    return _pyCrazyCPP.ConfigureError_getErrorModes()
ConfigureError_getErrorModes = _pyCrazyCPP.ConfigureError_getErrorModes

def ConfigureError_setErrorModes(errorModes):
    return _pyCrazyCPP.ConfigureError_setErrorModes(errorModes)
ConfigureError_setErrorModes = _pyCrazyCPP.ConfigureError_setErrorModes

class ConfigureLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigureLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigureLog, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getPriorityThreshold"] = lambda x: _pyCrazyCPP.ConfigureLog_getPriorityThreshold
    if _newclass:
        getPriorityThreshold = staticmethod(_pyCrazyCPP.ConfigureLog_getPriorityThreshold)
    __swig_getmethods__["getLogModes"] = lambda x: _pyCrazyCPP.ConfigureLog_getLogModes
    if _newclass:
        getLogModes = staticmethod(_pyCrazyCPP.ConfigureLog_getLogModes)
    __swig_getmethods__["setPriorityThreshold"] = lambda x: _pyCrazyCPP.ConfigureLog_setPriorityThreshold
    if _newclass:
        setPriorityThreshold = staticmethod(_pyCrazyCPP.ConfigureLog_setPriorityThreshold)
    __swig_getmethods__["setLogModes"] = lambda x: _pyCrazyCPP.ConfigureLog_setLogModes
    if _newclass:
        setLogModes = staticmethod(_pyCrazyCPP.ConfigureLog_setLogModes)

    def __init__(self):
        this = _pyCrazyCPP.new_ConfigureLog()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_ConfigureLog
    __del__ = lambda self: None
ConfigureLog_swigregister = _pyCrazyCPP.ConfigureLog_swigregister
ConfigureLog_swigregister(ConfigureLog)

def ConfigureLog_getPriorityThreshold():
    return _pyCrazyCPP.ConfigureLog_getPriorityThreshold()
ConfigureLog_getPriorityThreshold = _pyCrazyCPP.ConfigureLog_getPriorityThreshold

def ConfigureLog_getLogModes():
    return _pyCrazyCPP.ConfigureLog_getLogModes()
ConfigureLog_getLogModes = _pyCrazyCPP.ConfigureLog_getLogModes

def ConfigureLog_setPriorityThreshold(priorityThreshold):
    return _pyCrazyCPP.ConfigureLog_setPriorityThreshold(priorityThreshold)
ConfigureLog_setPriorityThreshold = _pyCrazyCPP.ConfigureLog_setPriorityThreshold

def ConfigureLog_setLogModes(loggingModes):
    return _pyCrazyCPP.ConfigureLog_setLogModes(loggingModes)
ConfigureLog_setLogModes = _pyCrazyCPP.ConfigureLog_setLogModes

class myLight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, myLight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, myLight, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _pyCrazyCPP.myLight_position_set
    __swig_getmethods__["position"] = _pyCrazyCPP.myLight_position_get
    if _newclass:
        position = _swig_property(_pyCrazyCPP.myLight_position_get, _pyCrazyCPP.myLight_position_set)
    __swig_setmethods__["intensities"] = _pyCrazyCPP.myLight_intensities_set
    __swig_getmethods__["intensities"] = _pyCrazyCPP.myLight_intensities_get
    if _newclass:
        intensities = _swig_property(_pyCrazyCPP.myLight_intensities_get, _pyCrazyCPP.myLight_intensities_set)

    def __init__(self):
        this = _pyCrazyCPP.new_myLight()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_myLight
    __del__ = lambda self: None
myLight_swigregister = _pyCrazyCPP.myLight_swigregister
myLight_swigregister(myLight)

class BaseRender(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseRender, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseRender, name)
    __repr__ = _swig_repr
    __swig_setmethods__["light0"] = _pyCrazyCPP.BaseRender_light0_set
    __swig_getmethods__["light0"] = _pyCrazyCPP.BaseRender_light0_get
    if _newclass:
        light0 = _swig_property(_pyCrazyCPP.BaseRender_light0_get, _pyCrazyCPP.BaseRender_light0_set)

    def __init__(self, program):
        this = _pyCrazyCPP.new_BaseRender(program)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_BaseRender
    __del__ = lambda self: None

    def ConvertTextureAndUvs(self, mesh):
        return _pyCrazyCPP.BaseRender_ConvertTextureAndUvs(self, mesh)

    def UploadTexture(self, mesh):
        return _pyCrazyCPP.BaseRender_UploadTexture(self, mesh)

    def DeleteTexture(self):
        return _pyCrazyCPP.BaseRender_DeleteTexture(self)

    def UploadVerticesPosition(self, mesh):
        return _pyCrazyCPP.BaseRender_UploadVerticesPosition(self, mesh)

    def UploadVerticesNormals(self, mesh):
        return _pyCrazyCPP.BaseRender_UploadVerticesNormals(self, mesh)

    def UploadUVs(self, mesh):
        return _pyCrazyCPP.BaseRender_UploadUVs(self, mesh)

    def UploadGeometry(self, mesh):
        return _pyCrazyCPP.BaseRender_UploadGeometry(self, mesh)

    def DeleteVerticesPositionBuffer(self):
        return _pyCrazyCPP.BaseRender_DeleteVerticesPositionBuffer(self)

    def DeleteVerticesNormalsBuffer(self):
        return _pyCrazyCPP.BaseRender_DeleteVerticesNormalsBuffer(self)

    def DeleteUVsBuffer(self):
        return _pyCrazyCPP.BaseRender_DeleteUVsBuffer(self)

    def Set_VAO_Attributes(self):
        return _pyCrazyCPP.BaseRender_Set_VAO_Attributes(self)

    def CreateVAO(self):
        return _pyCrazyCPP.BaseRender_CreateVAO(self)

    def BindVAO(self):
        return _pyCrazyCPP.BaseRender_BindVAO(self)

    def UnBindVAO(self):
        return _pyCrazyCPP.BaseRender_UnBindVAO(self)

    def CreateFBO(self):
        return _pyCrazyCPP.BaseRender_CreateFBO(self)

    def BindFBO(self):
        return _pyCrazyCPP.BaseRender_BindFBO(self)

    def UnBindFBO(self):
        return _pyCrazyCPP.BaseRender_UnBindFBO(self)

    def DeleteFBO(self):
        return _pyCrazyCPP.BaseRender_DeleteFBO(self)

    def CreateTextureBuffer(self, windowWidth, windowHeight):
        return _pyCrazyCPP.BaseRender_CreateTextureBuffer(self, windowWidth, windowHeight)

    def AttachTexture2Pipeline(self):
        return _pyCrazyCPP.BaseRender_AttachTexture2Pipeline(self)

    def DeleteRenderedTexture(self):
        return _pyCrazyCPP.BaseRender_DeleteRenderedTexture(self)

    def ShaderRendering(self, project_matrix, render_mode):
        return _pyCrazyCPP.BaseRender_ShaderRendering(self, project_matrix, render_mode)

    def ShaderRendering_Test(self, project_matrix, render_mode):
        return _pyCrazyCPP.BaseRender_ShaderRendering_Test(self, project_matrix, render_mode)

    def GetColorTexture(self, project_matrix, render_mode, windowWidth, windowHeight):
        return _pyCrazyCPP.BaseRender_GetColorTexture(self, project_matrix, render_mode, windowWidth, windowHeight)

    def GetDepthTexture(self, project_matrix, render_mode, windowWidth, windowHeight):
        return _pyCrazyCPP.BaseRender_GetDepthTexture(self, project_matrix, render_mode, windowWidth, windowHeight)
BaseRender_swigregister = _pyCrazyCPP.BaseRender_swigregister
BaseRender_swigregister(BaseRender)


_pyCrazyCPP.GlobalOffSet_swigconstant(_pyCrazyCPP)
GlobalOffSet = _pyCrazyCPP.GlobalOffSet

_pyCrazyCPP.PI_1_swigconstant(_pyCrazyCPP)
PI_1 = _pyCrazyCPP.PI_1

_pyCrazyCPP.PI_2_swigconstant(_pyCrazyCPP)
PI_2 = _pyCrazyCPP.PI_2
class BasicDraw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicDraw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicDraw, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyCrazyCPP.new_BasicDraw()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_getmethods__["Array_Draw_myMesh"] = lambda x: _pyCrazyCPP.BasicDraw_Array_Draw_myMesh
    if _newclass:
        Array_Draw_myMesh = staticmethod(_pyCrazyCPP.BasicDraw_Array_Draw_myMesh)

    def DrawObject(self, x, y, z, r, g, b, scale):
        return _pyCrazyCPP.BasicDraw_DrawObject(self, x, y, z, r, g, b, scale)

    def DrawLine(self, x1, y1, z1, x2, y2, z2, r, g, b):
        return _pyCrazyCPP.BasicDraw_DrawLine(self, x1, y1, z1, x2, y2, z2, r, g, b)
    __swig_getmethods__["PickNearestObject"] = lambda x: _pyCrazyCPP.BasicDraw_PickNearestObject
    if _newclass:
        PickNearestObject = staticmethod(_pyCrazyCPP.BasicDraw_PickNearestObject)
    __swig_destroy__ = _pyCrazyCPP.delete_BasicDraw
    __del__ = lambda self: None
BasicDraw_swigregister = _pyCrazyCPP.BasicDraw_swigregister
BasicDraw_swigregister(BasicDraw)

def BasicDraw_Array_Draw_myMesh(mesh, draw_mode):
    return _pyCrazyCPP.BasicDraw_Array_Draw_myMesh(mesh, draw_mode)
BasicDraw_Array_Draw_myMesh = _pyCrazyCPP.BasicDraw_Array_Draw_myMesh

def BasicDraw_PickNearestObject(mesh, x, y, cam_zNear, cam_zFar):
    return _pyCrazyCPP.BasicDraw_PickNearestObject(mesh, x, y, cam_zNear, cam_zFar)
BasicDraw_PickNearestObject = _pyCrazyCPP.BasicDraw_PickNearestObject

class CrazyRender(BaseRender):
    __swig_setmethods__ = {}
    for _s in [BaseRender]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrazyRender, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseRender]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrazyRender, name)
    __repr__ = _swig_repr

    def __init__(self, program):
        this = _pyCrazyCPP.new_CrazyRender(program)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_CrazyRender
    __del__ = lambda self: None

    def Update(self, mesh):
        return _pyCrazyCPP.CrazyRender_Update(self, mesh)

    def UpdateTexture(self, mesh):
        return _pyCrazyCPP.CrazyRender_UpdateTexture(self, mesh)

    def UpdateGe(self, mesh):
        return _pyCrazyCPP.CrazyRender_UpdateGe(self, mesh)

    def Rendering(self, project_matrix, render_mode):
        return _pyCrazyCPP.CrazyRender_Rendering(self, project_matrix, render_mode)
CrazyRender_swigregister = _pyCrazyCPP.CrazyRender_swigregister
CrazyRender_swigregister(CrazyRender)

class GlTexture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlTexture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GlTexture, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyCrazyCPP.new_GlTexture(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_GlTexture
    __del__ = lambda self: None

    def Reinitialise(self, *args):
        return _pyCrazyCPP.GlTexture_Reinitialise(self, *args)

    def Bind(self):
        return _pyCrazyCPP.GlTexture_Bind(self)

    def Unbind(self):
        return _pyCrazyCPP.GlTexture_Unbind(self)

    def Upload(self, *args):
        return _pyCrazyCPP.GlTexture_Upload(self, *args)
    __swig_setmethods__["internal_format"] = _pyCrazyCPP.GlTexture_internal_format_set
    __swig_getmethods__["internal_format"] = _pyCrazyCPP.GlTexture_internal_format_get
    if _newclass:
        internal_format = _swig_property(_pyCrazyCPP.GlTexture_internal_format_get, _pyCrazyCPP.GlTexture_internal_format_set)
    __swig_setmethods__["tid"] = _pyCrazyCPP.GlTexture_tid_set
    __swig_getmethods__["tid"] = _pyCrazyCPP.GlTexture_tid_get
    if _newclass:
        tid = _swig_property(_pyCrazyCPP.GlTexture_tid_get, _pyCrazyCPP.GlTexture_tid_set)
    __swig_setmethods__["width"] = _pyCrazyCPP.GlTexture_width_set
    __swig_getmethods__["width"] = _pyCrazyCPP.GlTexture_width_get
    if _newclass:
        width = _swig_property(_pyCrazyCPP.GlTexture_width_get, _pyCrazyCPP.GlTexture_width_set)
    __swig_setmethods__["height"] = _pyCrazyCPP.GlTexture_height_set
    __swig_getmethods__["height"] = _pyCrazyCPP.GlTexture_height_get
    if _newclass:
        height = _swig_property(_pyCrazyCPP.GlTexture_height_get, _pyCrazyCPP.GlTexture_height_set)
GlTexture_swigregister = _pyCrazyCPP.GlTexture_swigregister
GlTexture_swigregister(GlTexture)

class Render(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Render, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Render, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Update(self, mesh):
        return _pyCrazyCPP.Render_Update(self, mesh)

    def UpdateTexture(self, mesh):
        return _pyCrazyCPP.Render_UpdateTexture(self, mesh)

    def UpdateGe(self, mesh):
        return _pyCrazyCPP.Render_UpdateGe(self, mesh)

    def Rendering(self, project_matrix, render_mode):
        return _pyCrazyCPP.Render_Rendering(self, project_matrix, render_mode)
    __swig_destroy__ = _pyCrazyCPP.delete_Render
    __del__ = lambda self: None
Render_swigregister = _pyCrazyCPP.Render_swigregister
Render_swigregister(Render)

class Shader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shader, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyCrazyCPP.new_Shader()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def programId(self):
        return _pyCrazyCPP.Shader_programId(self)

    def setUniform(self, v):
        return _pyCrazyCPP.Shader_setUniform(self, v)
    __swig_destroy__ = _pyCrazyCPP.delete_Shader
    __del__ = lambda self: None
Shader_swigregister = _pyCrazyCPP.Shader_swigregister
Shader_swigregister(Shader)


def loadProgramFromFile(vertex_shader, fragment_shader, shader_dir_char):
    return _pyCrazyCPP.loadProgramFromFile(vertex_shader, fragment_shader, shader_dir_char)
loadProgramFromFile = _pyCrazyCPP.loadProgramFromFile
class Uniform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uniform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Uniform, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyCrazyCPP.new_Uniform(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["id"] = _pyCrazyCPP.Uniform_id_set
    __swig_getmethods__["id"] = _pyCrazyCPP.Uniform_id_get
    if _newclass:
        id = _swig_property(_pyCrazyCPP.Uniform_id_get, _pyCrazyCPP.Uniform_id_set)
    __swig_setmethods__["i"] = _pyCrazyCPP.Uniform_i_set
    __swig_getmethods__["i"] = _pyCrazyCPP.Uniform_i_get
    if _newclass:
        i = _swig_property(_pyCrazyCPP.Uniform_i_get, _pyCrazyCPP.Uniform_i_set)
    __swig_setmethods__["f"] = _pyCrazyCPP.Uniform_f_set
    __swig_getmethods__["f"] = _pyCrazyCPP.Uniform_f_get
    if _newclass:
        f = _swig_property(_pyCrazyCPP.Uniform_f_get, _pyCrazyCPP.Uniform_f_set)
    __swig_setmethods__["v2"] = _pyCrazyCPP.Uniform_v2_set
    __swig_getmethods__["v2"] = _pyCrazyCPP.Uniform_v2_get
    if _newclass:
        v2 = _swig_property(_pyCrazyCPP.Uniform_v2_get, _pyCrazyCPP.Uniform_v2_set)
    __swig_setmethods__["v3"] = _pyCrazyCPP.Uniform_v3_set
    __swig_getmethods__["v3"] = _pyCrazyCPP.Uniform_v3_get
    if _newclass:
        v3 = _swig_property(_pyCrazyCPP.Uniform_v3_get, _pyCrazyCPP.Uniform_v3_set)
    __swig_setmethods__["v4"] = _pyCrazyCPP.Uniform_v4_set
    __swig_getmethods__["v4"] = _pyCrazyCPP.Uniform_v4_get
    if _newclass:
        v4 = _swig_property(_pyCrazyCPP.Uniform_v4_get, _pyCrazyCPP.Uniform_v4_set)
    __swig_setmethods__["m4"] = _pyCrazyCPP.Uniform_m4_set
    __swig_getmethods__["m4"] = _pyCrazyCPP.Uniform_m4_get
    if _newclass:
        m4 = _swig_property(_pyCrazyCPP.Uniform_m4_get, _pyCrazyCPP.Uniform_m4_set)
    INT = _pyCrazyCPP.Uniform_INT
    FLOAT = _pyCrazyCPP.Uniform_FLOAT
    VEC2 = _pyCrazyCPP.Uniform_VEC2
    VEC3 = _pyCrazyCPP.Uniform_VEC3
    VEC4 = _pyCrazyCPP.Uniform_VEC4
    MAT4 = _pyCrazyCPP.Uniform_MAT4
    NONE = _pyCrazyCPP.Uniform_NONE
    __swig_setmethods__["t"] = _pyCrazyCPP.Uniform_t_set
    __swig_getmethods__["t"] = _pyCrazyCPP.Uniform_t_get
    if _newclass:
        t = _swig_property(_pyCrazyCPP.Uniform_t_get, _pyCrazyCPP.Uniform_t_set)
    __swig_destroy__ = _pyCrazyCPP.delete_Uniform
    __del__ = lambda self: None
Uniform_swigregister = _pyCrazyCPP.Uniform_swigregister
Uniform_swigregister(Uniform)

class Colour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Colour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Colour, name)
    __repr__ = _swig_repr
    __swig_getmethods__["White"] = lambda x: _pyCrazyCPP.Colour_White
    if _newclass:
        White = staticmethod(_pyCrazyCPP.Colour_White)
    __swig_getmethods__["Black"] = lambda x: _pyCrazyCPP.Colour_Black
    if _newclass:
        Black = staticmethod(_pyCrazyCPP.Colour_Black)
    __swig_getmethods__["Red"] = lambda x: _pyCrazyCPP.Colour_Red
    if _newclass:
        Red = staticmethod(_pyCrazyCPP.Colour_Red)
    __swig_getmethods__["Green"] = lambda x: _pyCrazyCPP.Colour_Green
    if _newclass:
        Green = staticmethod(_pyCrazyCPP.Colour_Green)
    __swig_getmethods__["Blue"] = lambda x: _pyCrazyCPP.Colour_Blue
    if _newclass:
        Blue = staticmethod(_pyCrazyCPP.Colour_Blue)
    __swig_getmethods__["Unspecified"] = lambda x: _pyCrazyCPP.Colour_Unspecified
    if _newclass:
        Unspecified = staticmethod(_pyCrazyCPP.Colour_Unspecified)

    def __init__(self, *args):
        this = _pyCrazyCPP.new_Colour(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Get(self):
        return _pyCrazyCPP.Colour_Get(self)

    def WithAlpha(self, alpha):
        return _pyCrazyCPP.Colour_WithAlpha(self, alpha)
    __swig_getmethods__["Hsv"] = lambda x: _pyCrazyCPP.Colour_Hsv
    if _newclass:
        Hsv = staticmethod(_pyCrazyCPP.Colour_Hsv)
    __swig_destroy__ = _pyCrazyCPP.delete_Colour
    __del__ = lambda self: None
Colour_swigregister = _pyCrazyCPP.Colour_swigregister
Colour_swigregister(Colour)

def Colour_White():
    return _pyCrazyCPP.Colour_White()
Colour_White = _pyCrazyCPP.Colour_White

def Colour_Black():
    return _pyCrazyCPP.Colour_Black()
Colour_Black = _pyCrazyCPP.Colour_Black

def Colour_Red():
    return _pyCrazyCPP.Colour_Red()
Colour_Red = _pyCrazyCPP.Colour_Red

def Colour_Green():
    return _pyCrazyCPP.Colour_Green()
Colour_Green = _pyCrazyCPP.Colour_Green

def Colour_Blue():
    return _pyCrazyCPP.Colour_Blue()
Colour_Blue = _pyCrazyCPP.Colour_Blue

def Colour_Unspecified():
    return _pyCrazyCPP.Colour_Unspecified()
Colour_Unspecified = _pyCrazyCPP.Colour_Unspecified

def Colour_Hsv(hue, sat=1.0, val=1.0, alpha=1.0):
    return _pyCrazyCPP.Colour_Hsv(hue, sat, val, alpha)
Colour_Hsv = _pyCrazyCPP.Colour_Hsv

class ColourWheel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColourWheel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColourWheel, name)
    __repr__ = _swig_repr

    def __init__(self, saturation=0.5, value=1.0, alpha=1.0):
        this = _pyCrazyCPP.new_ColourWheel(saturation, value, alpha)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def GetColourBin(self, i):
        return _pyCrazyCPP.ColourWheel_GetColourBin(self, i)

    def GetUniqueColour(self):
        return _pyCrazyCPP.ColourWheel_GetUniqueColour(self)
    __swig_destroy__ = _pyCrazyCPP.delete_ColourWheel
    __del__ = lambda self: None
ColourWheel_swigregister = _pyCrazyCPP.ColourWheel_swigregister
ColourWheel_swigregister(ColourWheel)


_pyCrazyCPP.GlSlAnnotatedShader_swigconstant(_pyCrazyCPP)
GlSlAnnotatedShader = _pyCrazyCPP.GlSlAnnotatedShader

_pyCrazyCPP.GlSlFragmentShader_swigconstant(_pyCrazyCPP)
GlSlFragmentShader = _pyCrazyCPP.GlSlFragmentShader

_pyCrazyCPP.GlSlVertexShader_swigconstant(_pyCrazyCPP)
GlSlVertexShader = _pyCrazyCPP.GlSlVertexShader

_pyCrazyCPP.GlSlGeometryShader_swigconstant(_pyCrazyCPP)
GlSlGeometryShader = _pyCrazyCPP.GlSlGeometryShader

_pyCrazyCPP.GlSlComputeShader_swigconstant(_pyCrazyCPP)
GlSlComputeShader = _pyCrazyCPP.GlSlComputeShader
class GlSlProgram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlSlProgram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GlSlProgram, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyCrazyCPP.new_GlSlProgram(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_GlSlProgram
    __del__ = lambda self: None

    def AddShader(self, *args):
        return _pyCrazyCPP.GlSlProgram_AddShader(self, *args)

    def AddShaderFromFile(self, *args):
        return _pyCrazyCPP.GlSlProgram_AddShaderFromFile(self, *args)

    def Link(self):
        return _pyCrazyCPP.GlSlProgram_Link(self)

    def ReloadShaderFiles(self):
        return _pyCrazyCPP.GlSlProgram_ReloadShaderFiles(self)

    def GetAttributeHandle(self, name):
        return _pyCrazyCPP.GlSlProgram_GetAttributeHandle(self, name)

    def GetUniformHandle(self, name):
        return _pyCrazyCPP.GlSlProgram_GetUniformHandle(self, name)

    def SetUniform(self, *args):
        return _pyCrazyCPP.GlSlProgram_SetUniform(self, *args)

    def Bind(self):
        return _pyCrazyCPP.GlSlProgram_Bind(self)

    def SaveBind(self):
        return _pyCrazyCPP.GlSlProgram_SaveBind(self)

    def Unbind(self):
        return _pyCrazyCPP.GlSlProgram_Unbind(self)

    def BindPangolinDefaultAttribLocationsAndLink(self):
        return _pyCrazyCPP.GlSlProgram_BindPangolinDefaultAttribLocationsAndLink(self)

    def ProgramId(self):
        return _pyCrazyCPP.GlSlProgram_ProgramId(self)
GlSlProgram_swigregister = _pyCrazyCPP.GlSlProgram_swigregister
GlSlProgram_swigregister(GlSlProgram)
cvar = _pyCrazyCPP.cvar
DEFAULT_LOCATION_POSITION = cvar.DEFAULT_LOCATION_POSITION
DEFAULT_LOCATION_COLOUR = cvar.DEFAULT_LOCATION_COLOUR
DEFAULT_LOCATION_NORMAL = cvar.DEFAULT_LOCATION_NORMAL
DEFAULT_LOCATION_TEXCOORD = cvar.DEFAULT_LOCATION_TEXCOORD
DEFAULT_NAME_POSITION = cvar.DEFAULT_NAME_POSITION
DEFAULT_NAME_COLOUR = cvar.DEFAULT_NAME_COLOUR
DEFAULT_NAME_NORMAL = cvar.DEFAULT_NAME_NORMAL
DEFAULT_NAME_TEXCOORD = cvar.DEFAULT_NAME_TEXCOORD

class GlSlUtilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlSlUtilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GlSlUtilities, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["OffsetAndScale"] = lambda x: _pyCrazyCPP.GlSlUtilities_OffsetAndScale
    if _newclass:
        OffsetAndScale = staticmethod(_pyCrazyCPP.GlSlUtilities_OffsetAndScale)
    __swig_getmethods__["Scale"] = lambda x: _pyCrazyCPP.GlSlUtilities_Scale
    if _newclass:
        Scale = staticmethod(_pyCrazyCPP.GlSlUtilities_Scale)
    __swig_getmethods__["UseNone"] = lambda x: _pyCrazyCPP.GlSlUtilities_UseNone
    if _newclass:
        UseNone = staticmethod(_pyCrazyCPP.GlSlUtilities_UseNone)
    __swig_destroy__ = _pyCrazyCPP.delete_GlSlUtilities
    __del__ = lambda self: None
GlSlUtilities_swigregister = _pyCrazyCPP.GlSlUtilities_swigregister
GlSlUtilities_swigregister(GlSlUtilities)

def GlSlUtilities_OffsetAndScale(offset, scale):
    return _pyCrazyCPP.GlSlUtilities_OffsetAndScale(offset, scale)
GlSlUtilities_OffsetAndScale = _pyCrazyCPP.GlSlUtilities_OffsetAndScale

def GlSlUtilities_Scale(scale, bias=0.0):
    return _pyCrazyCPP.GlSlUtilities_Scale(scale, bias)
GlSlUtilities_Scale = _pyCrazyCPP.GlSlUtilities_Scale

def GlSlUtilities_UseNone():
    return _pyCrazyCPP.GlSlUtilities_UseNone()
GlSlUtilities_UseNone = _pyCrazyCPP.GlSlUtilities_UseNone


def IsLinkSuccessPrintLog(prog):
    return _pyCrazyCPP.IsLinkSuccessPrintLog(prog)
IsLinkSuccessPrintLog = _pyCrazyCPP.IsLinkSuccessPrintLog

def IsCompileSuccessPrintLog(shader, name_for_errors):
    return _pyCrazyCPP.IsCompileSuccessPrintLog(shader, name_for_errors)
IsCompileSuccessPrintLog = _pyCrazyCPP.IsCompileSuccessPrintLog
class CrazyGUI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrazyGUI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrazyGUI, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyCrazyCPP.new_CrazyGUI(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Init(self, conf):
        return _pyCrazyCPP.CrazyGUI_Init(self, conf)
    __swig_destroy__ = _pyCrazyCPP.delete_CrazyGUI
    __del__ = lambda self: None

    def ShouldExit(self):
        return _pyCrazyCPP.CrazyGUI_ShouldExit(self)

    def Precall(self):
        return _pyCrazyCPP.CrazyGUI_Precall(self)

    def PostCall(self):
        return _pyCrazyCPP.CrazyGUI_PostCall(self)

    def ProcessEvent(self, tDatum):
        return _pyCrazyCPP.CrazyGUI_ProcessEvent(self, tDatum)

    def UpdateUI(self, temp_conf):
        return _pyCrazyCPP.CrazyGUI_UpdateUI(self, temp_conf)

    def UpdataDataBar(self, temp_conf):
        return _pyCrazyCPP.CrazyGUI_UpdataDataBar(self, temp_conf)

    def UpdataCheckbox(self, temp_conf):
        return _pyCrazyCPP.CrazyGUI_UpdataCheckbox(self, temp_conf)

    def GetViewMatrix(self):
        return _pyCrazyCPP.CrazyGUI_GetViewMatrix(self)
CrazyGUI_swigregister = _pyCrazyCPP.CrazyGUI_swigregister
CrazyGUI_swigregister(CrazyGUI)

class CrazyWindow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrazyWindow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrazyWindow, name)
    __repr__ = _swig_repr

    def __init__(self, conf):
        this = _pyCrazyCPP.new_CrazyWindow(conf)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def SetCallbackFunctions(self):
        return _pyCrazyCPP.CrazyWindow_SetCallbackFunctions(self)

    def ShouldExit(self):
        return _pyCrazyCPP.CrazyWindow_ShouldExit(self)

    def Precall(self):
        return _pyCrazyCPP.CrazyWindow_Precall(self)

    def PostCall(self):
        return _pyCrazyCPP.CrazyWindow_PostCall(self)

    def my_glfw_mouse_click_callback(self, window, button, action, mods):
        return _pyCrazyCPP.CrazyWindow_my_glfw_mouse_click_callback(self, window, button, action, mods)

    def GetProjectMatrix(self, w, h, fu, fv, u0, v0, zNear, zFar):
        return _pyCrazyCPP.CrazyWindow_GetProjectMatrix(self, w, h, fu, fv, u0, v0, zNear, zFar)

    def GetViewPortMatrix(self):
        return _pyCrazyCPP.CrazyWindow_GetViewPortMatrix(self)
    __swig_destroy__ = _pyCrazyCPP.delete_CrazyWindow
    __del__ = lambda self: None
CrazyWindow_swigregister = _pyCrazyCPP.CrazyWindow_swigregister
CrazyWindow_swigregister(CrazyWindow)


def glfw_mouse_click_callback(window, button, action, mods):
    return _pyCrazyCPP.glfw_mouse_click_callback(window, button, action, mods)
glfw_mouse_click_callback = _pyCrazyCPP.glfw_mouse_click_callback

_pyCrazyCPP.MouseButtonLeftDown_swigconstant(_pyCrazyCPP)
MouseButtonLeftDown = _pyCrazyCPP.MouseButtonLeftDown

_pyCrazyCPP.MouseButtonRightDown_swigconstant(_pyCrazyCPP)
MouseButtonRightDown = _pyCrazyCPP.MouseButtonRightDown

_pyCrazyCPP.MouseButtonUp_swigconstant(_pyCrazyCPP)
MouseButtonUp = _pyCrazyCPP.MouseButtonUp
class MouseAction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseAction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MouseAction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pyCrazyCPP.MouseAction_x_set
    __swig_getmethods__["x"] = _pyCrazyCPP.MouseAction_x_get
    if _newclass:
        x = _swig_property(_pyCrazyCPP.MouseAction_x_get, _pyCrazyCPP.MouseAction_x_set)
    __swig_setmethods__["y"] = _pyCrazyCPP.MouseAction_y_set
    __swig_getmethods__["y"] = _pyCrazyCPP.MouseAction_y_get
    if _newclass:
        y = _swig_property(_pyCrazyCPP.MouseAction_y_get, _pyCrazyCPP.MouseAction_y_set)
    __swig_setmethods__["state"] = _pyCrazyCPP.MouseAction_state_set
    __swig_getmethods__["state"] = _pyCrazyCPP.MouseAction_state_get
    if _newclass:
        state = _swig_property(_pyCrazyCPP.MouseAction_state_get, _pyCrazyCPP.MouseAction_state_set)
    __swig_setmethods__["Pressed"] = _pyCrazyCPP.MouseAction_Pressed_set
    __swig_getmethods__["Pressed"] = _pyCrazyCPP.MouseAction_Pressed_get
    if _newclass:
        Pressed = _swig_property(_pyCrazyCPP.MouseAction_Pressed_get, _pyCrazyCPP.MouseAction_Pressed_set)

    def clear(self):
        return _pyCrazyCPP.MouseAction_clear(self)

    def __init__(self):
        this = _pyCrazyCPP.new_MouseAction()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_MouseAction
    __del__ = lambda self: None
MouseAction_swigregister = _pyCrazyCPP.MouseAction_swigregister
MouseAction_swigregister(MouseAction)


_pyCrazyCPP.GL_GPU_MEM_INFO_CURRENT_AVAILABLE_MEM_NVX_swigconstant(_pyCrazyCPP)
GL_GPU_MEM_INFO_CURRENT_AVAILABLE_MEM_NVX = _pyCrazyCPP.GL_GPU_MEM_INFO_CURRENT_AVAILABLE_MEM_NVX
class PangolinGUI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PangolinGUI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PangolinGUI, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mouse"] = _pyCrazyCPP.PangolinGUI_mouse_set
    __swig_getmethods__["mouse"] = _pyCrazyCPP.PangolinGUI_mouse_get
    if _newclass:
        mouse = _swig_property(_pyCrazyCPP.PangolinGUI_mouse_get, _pyCrazyCPP.PangolinGUI_mouse_set)

    def __init__(self, conf):
        this = _pyCrazyCPP.new_PangolinGUI(conf)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def GL_Init(self):
        return _pyCrazyCPP.PangolinGUI_GL_Init(self)

    def SetUpUI(self, config):
        return _pyCrazyCPP.PangolinGUI_SetUpUI(self, config)

    def SetUpBoxUI(self, config):
        return _pyCrazyCPP.PangolinGUI_SetUpBoxUI(self, config)

    def SetUpButtonUI(self, config):
        return _pyCrazyCPP.PangolinGUI_SetUpButtonUI(self, config)

    def SetUpDataBarUI(self, config):
        return _pyCrazyCPP.PangolinGUI_SetUpDataBarUI(self, config)

    def DeleteBoxUI(self):
        return _pyCrazyCPP.PangolinGUI_DeleteBoxUI(self)

    def DeleteButtonUI(self):
        return _pyCrazyCPP.PangolinGUI_DeleteButtonUI(self)

    def DeleteDataBarUI(self):
        return _pyCrazyCPP.PangolinGUI_DeleteDataBarUI(self)
    __swig_destroy__ = _pyCrazyCPP.delete_PangolinGUI
    __del__ = lambda self: None

    def ShouldExit(self):
        return _pyCrazyCPP.PangolinGUI_ShouldExit(self)

    def Precall(self):
        return _pyCrazyCPP.PangolinGUI_Precall(self)

    def PostCall(self):
        return _pyCrazyCPP.PangolinGUI_PostCall(self)

    def ProcessEvent(self, tDatum):
        return _pyCrazyCPP.PangolinGUI_ProcessEvent(self, tDatum)

    def Command(self, cmd):
        return _pyCrazyCPP.PangolinGUI_Command(self, cmd)

    def CheckControl(self, cmd):
        return _pyCrazyCPP.PangolinGUI_CheckControl(self, cmd)

    def GetData(self, cmd):
        return _pyCrazyCPP.PangolinGUI_GetData(self, cmd)

    def SetData(self, cmd, data):
        return _pyCrazyCPP.PangolinGUI_SetData(self, cmd, data)

    def GetViewMatrix(self):
        return _pyCrazyCPP.PangolinGUI_GetViewMatrix(self)

    def UpdateShowImage(self, images):
        return _pyCrazyCPP.PangolinGUI_UpdateShowImage(self, images)
PangolinGUI_swigregister = _pyCrazyCPP.PangolinGUI_swigregister
PangolinGUI_swigregister(PangolinGUI)

class TripletID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TripletID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TripletID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyCrazyCPP.new_TripletID(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Id0(self):
        return _pyCrazyCPP.TripletID_Id0(self)

    def Id1(self):
        return _pyCrazyCPP.TripletID_Id1(self)

    def Id2(self):
        return _pyCrazyCPP.TripletID_Id2(self)

    def Id(self, idx):
        return _pyCrazyCPP.TripletID_Id(self, idx)
    __swig_setmethods__["v_id"] = _pyCrazyCPP.TripletID_v_id_set
    __swig_getmethods__["v_id"] = _pyCrazyCPP.TripletID_v_id_get
    if _newclass:
        v_id = _swig_property(_pyCrazyCPP.TripletID_v_id_get, _pyCrazyCPP.TripletID_v_id_set)
    __swig_destroy__ = _pyCrazyCPP.delete_TripletID
    __del__ = lambda self: None
TripletID_swigregister = _pyCrazyCPP.TripletID_swigregister
TripletID_swigregister(TripletID)

class RGB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RGB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RGB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["R"] = _pyCrazyCPP.RGB_R_set
    __swig_getmethods__["R"] = _pyCrazyCPP.RGB_R_get
    if _newclass:
        R = _swig_property(_pyCrazyCPP.RGB_R_get, _pyCrazyCPP.RGB_R_set)
    __swig_setmethods__["G"] = _pyCrazyCPP.RGB_G_set
    __swig_getmethods__["G"] = _pyCrazyCPP.RGB_G_get
    if _newclass:
        G = _swig_property(_pyCrazyCPP.RGB_G_get, _pyCrazyCPP.RGB_G_set)
    __swig_setmethods__["B"] = _pyCrazyCPP.RGB_B_set
    __swig_getmethods__["B"] = _pyCrazyCPP.RGB_B_get
    if _newclass:
        B = _swig_property(_pyCrazyCPP.RGB_B_get, _pyCrazyCPP.RGB_B_set)

    def __init__(self, r, g, b):
        this = _pyCrazyCPP.new_RGB(r, g, b)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_RGB
    __del__ = lambda self: None
RGB_swigregister = _pyCrazyCPP.RGB_swigregister
RGB_swigregister(RGB)


_pyCrazyCPP.NON_swigconstant(_pyCrazyCPP)
NON = _pyCrazyCPP.NON

_pyCrazyCPP.Used_swigconstant(_pyCrazyCPP)
Used = _pyCrazyCPP.Used

_pyCrazyCPP.Selected_swigconstant(_pyCrazyCPP)
Selected = _pyCrazyCPP.Selected

_pyCrazyCPP.IsEdge_swigconstant(_pyCrazyCPP)
IsEdge = _pyCrazyCPP.IsEdge

_pyCrazyCPP.Corresponding_swigconstant(_pyCrazyCPP)
Corresponding = _pyCrazyCPP.Corresponding
class CMeshData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMeshData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMeshData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Vertices_MAT"] = _pyCrazyCPP.CMeshData_Vertices_MAT_set
    __swig_getmethods__["Vertices_MAT"] = _pyCrazyCPP.CMeshData_Vertices_MAT_get
    if _newclass:
        Vertices_MAT = _swig_property(_pyCrazyCPP.CMeshData_Vertices_MAT_get, _pyCrazyCPP.CMeshData_Vertices_MAT_set)
    __swig_setmethods__["Vertices_UV_MAT"] = _pyCrazyCPP.CMeshData_Vertices_UV_MAT_set
    __swig_getmethods__["Vertices_UV_MAT"] = _pyCrazyCPP.CMeshData_Vertices_UV_MAT_get
    if _newclass:
        Vertices_UV_MAT = _swig_property(_pyCrazyCPP.CMeshData_Vertices_UV_MAT_get, _pyCrazyCPP.CMeshData_Vertices_UV_MAT_set)
    __swig_setmethods__["Faces_MAT"] = _pyCrazyCPP.CMeshData_Faces_MAT_set
    __swig_getmethods__["Faces_MAT"] = _pyCrazyCPP.CMeshData_Faces_MAT_get
    if _newclass:
        Faces_MAT = _swig_property(_pyCrazyCPP.CMeshData_Faces_MAT_get, _pyCrazyCPP.CMeshData_Faces_MAT_set)
    __swig_setmethods__["Faces_UV_MAT"] = _pyCrazyCPP.CMeshData_Faces_UV_MAT_set
    __swig_getmethods__["Faces_UV_MAT"] = _pyCrazyCPP.CMeshData_Faces_UV_MAT_get
    if _newclass:
        Faces_UV_MAT = _swig_property(_pyCrazyCPP.CMeshData_Faces_UV_MAT_get, _pyCrazyCPP.CMeshData_Faces_UV_MAT_set)
    __swig_setmethods__["textures_MAT"] = _pyCrazyCPP.CMeshData_textures_MAT_set
    __swig_getmethods__["textures_MAT"] = _pyCrazyCPP.CMeshData_textures_MAT_get
    if _newclass:
        textures_MAT = _swig_property(_pyCrazyCPP.CMeshData_textures_MAT_get, _pyCrazyCPP.CMeshData_textures_MAT_set)

    def load_model(self, *args):
        return _pyCrazyCPP.CMeshData_load_model(self, *args)

    def save_model(self, filename):
        return _pyCrazyCPP.CMeshData_save_model(self, filename)

    def __init__(self):
        this = _pyCrazyCPP.new_CMeshData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_CMeshData
    __del__ = lambda self: None
CMeshData_swigregister = _pyCrazyCPP.CMeshData_swigregister
CMeshData_swigregister(CMeshData)

class CTexture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTexture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTexture, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyCrazyCPP.delete_CTexture
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pyCrazyCPP.new_CTexture(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Width(self):
        return _pyCrazyCPP.CTexture_Width(self)

    def Height(self):
        return _pyCrazyCPP.CTexture_Height(self)

    def empty(self):
        return _pyCrazyCPP.CTexture_empty(self)

    def clone(self):
        return _pyCrazyCPP.CTexture_clone(self)

    def GetData(self):
        return _pyCrazyCPP.CTexture_GetData(self)
CTexture_swigregister = _pyCrazyCPP.CTexture_swigregister
CTexture_swigregister(CTexture)

class CMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMesh, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyCrazyCPP.new_CMesh()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_CMesh
    __del__ = lambda self: None

    def Faces(self):
        return _pyCrazyCPP.CMesh_Faces(self)

    def Face(self, id):
        return _pyCrazyCPP.CMesh_Face(self, id)

    def FaceUVIDs(self):
        return _pyCrazyCPP.CMesh_FaceUVIDs(self)

    def FaceUVID(self, id):
        return _pyCrazyCPP.CMesh_FaceUVID(self, id)

    def FaceMateriaIDs(self):
        return _pyCrazyCPP.CMesh_FaceMateriaIDs(self)

    def FaceMateriaID(self, idx):
        return _pyCrazyCPP.CMesh_FaceMateriaID(self, idx)

    def CheckVerticesFlags(self, v_id, flag):
        return _pyCrazyCPP.CMesh_CheckVerticesFlags(self, v_id, flag)

    def SetVerticesFlags(self, v_id, flag):
        return _pyCrazyCPP.CMesh_SetVerticesFlags(self, v_id, flag)

    def CheckFacesFlags(self, f_id, flag, phase=1):
        return _pyCrazyCPP.CMesh_CheckFacesFlags(self, f_id, flag, phase)

    def SetFacesFlags(self, f_id, flag):
        return _pyCrazyCPP.CMesh_SetFacesFlags(self, f_id, flag)

    def FaceFlag(self, f_id):
        return _pyCrazyCPP.CMesh_FaceFlag(self, f_id)

    def VertexFlag(self, v_id):
        return _pyCrazyCPP.CMesh_VertexFlag(self, v_id)

    def FaceFlags(self):
        return _pyCrazyCPP.CMesh_FaceFlags(self)

    def VertexFlags(self):
        return _pyCrazyCPP.CMesh_VertexFlags(self)

    def Vertices(self):
        return _pyCrazyCPP.CMesh_Vertices(self)

    def StoredPts(self):
        return _pyCrazyCPP.CMesh_StoredPts(self)

    def V_Normals(self):
        return _pyCrazyCPP.CMesh_V_Normals(self)

    def F_Normals(self):
        return _pyCrazyCPP.CMesh_F_Normals(self)

    def Vertex(self, id):
        return _pyCrazyCPP.CMesh_Vertex(self, id)

    def V_Normal(self, id):
        return _pyCrazyCPP.CMesh_V_Normal(self, id)

    def F_Normal(self, id):
        return _pyCrazyCPP.CMesh_F_Normal(self, id)

    def Vertex_UVS(self):
        return _pyCrazyCPP.CMesh_Vertex_UVS(self)

    def Vertex_UV(self, idx):
        return _pyCrazyCPP.CMesh_Vertex_UV(self, idx)

    def Origin_UVS(self):
        return _pyCrazyCPP.CMesh_Origin_UVS(self)

    def Origin_UV(self, idx):
        return _pyCrazyCPP.CMesh_Origin_UV(self, idx)

    def Face_UVS(self):
        return _pyCrazyCPP.CMesh_Face_UVS(self)

    def Face_UV(self, idx):
        return _pyCrazyCPP.CMesh_Face_UV(self, idx)

    def Textures(self):
        return _pyCrazyCPP.CMesh_Textures(self)

    def Texture(self, id):
        return _pyCrazyCPP.CMesh_Texture(self, id)

    def TexturesName(self):
        return _pyCrazyCPP.CMesh_TexturesName(self)

    def TextureName(self, idx):
        return _pyCrazyCPP.CMesh_TextureName(self, idx)

    def Landmarks(self):
        return _pyCrazyCPP.CMesh_Landmarks(self)

    def GetFacesMat(self):
        return _pyCrazyCPP.CMesh_GetFacesMat(self)

    def GetVerticesMat(self):
        return _pyCrazyCPP.CMesh_GetVerticesMat(self)

    def GetStoredPointMat(self):
        return _pyCrazyCPP.CMesh_GetStoredPointMat(self)

    def GetVertexUVsMat(self):
        return _pyCrazyCPP.CMesh_GetVertexUVsMat(self)

    def GetVertexNormalsMat(self):
        return _pyCrazyCPP.CMesh_GetVertexNormalsMat(self)

    def GetFacesUVsMat(self):
        return _pyCrazyCPP.CMesh_GetFacesUVsMat(self)

    def GetLandmarks(self):
        return _pyCrazyCPP.CMesh_GetLandmarks(self)

    def GetTextures_Size(self):
        return _pyCrazyCPP.CMesh_GetTextures_Size(self)

    def GetTextureNames_Size(self):
        return _pyCrazyCPP.CMesh_GetTextureNames_Size(self)

    def GetTexture(self, j):
        return _pyCrazyCPP.CMesh_GetTexture(self, j)

    def GetTextureName(self, j):
        return _pyCrazyCPP.CMesh_GetTextureName(self, j)

    def SetLandmarks(self, l_mat):
        return _pyCrazyCPP.CMesh_SetLandmarks(self, l_mat)

    def SetFacesMat(self, faces_mat):
        return _pyCrazyCPP.CMesh_SetFacesMat(self, faces_mat)

    def SetVerticesMat(self, vertices_mat):
        return _pyCrazyCPP.CMesh_SetVerticesMat(self, vertices_mat)

    def SetVertexUVsMat(self, vertices_uv_mat):
        return _pyCrazyCPP.CMesh_SetVertexUVsMat(self, vertices_uv_mat)

    def SetStoredPoint(self, stord_pts_mat):
        return _pyCrazyCPP.CMesh_SetStoredPoint(self, stord_pts_mat)

    def SetTexture(self, texture, idx):
        return _pyCrazyCPP.CMesh_SetTexture(self, texture, idx)
    __swig_setmethods__["triangles"] = _pyCrazyCPP.CMesh_triangles_set
    __swig_getmethods__["triangles"] = _pyCrazyCPP.CMesh_triangles_get
    if _newclass:
        triangles = _swig_property(_pyCrazyCPP.CMesh_triangles_get, _pyCrazyCPP.CMesh_triangles_set)
    __swig_setmethods__["faceuvs_id"] = _pyCrazyCPP.CMesh_faceuvs_id_set
    __swig_getmethods__["faceuvs_id"] = _pyCrazyCPP.CMesh_faceuvs_id_get
    if _newclass:
        faceuvs_id = _swig_property(_pyCrazyCPP.CMesh_faceuvs_id_get, _pyCrazyCPP.CMesh_faceuvs_id_set)
    __swig_setmethods__["selected_faces_ids"] = _pyCrazyCPP.CMesh_selected_faces_ids_set
    __swig_getmethods__["selected_faces_ids"] = _pyCrazyCPP.CMesh_selected_faces_ids_get
    if _newclass:
        selected_faces_ids = _swig_property(_pyCrazyCPP.CMesh_selected_faces_ids_get, _pyCrazyCPP.CMesh_selected_faces_ids_set)
    __swig_setmethods__["landmarks_index"] = _pyCrazyCPP.CMesh_landmarks_index_set
    __swig_getmethods__["landmarks_index"] = _pyCrazyCPP.CMesh_landmarks_index_get
    if _newclass:
        landmarks_index = _swig_property(_pyCrazyCPP.CMesh_landmarks_index_get, _pyCrazyCPP.CMesh_landmarks_index_set)
    __swig_setmethods__["mesh_to_basis_map"] = _pyCrazyCPP.CMesh_mesh_to_basis_map_set
    __swig_getmethods__["mesh_to_basis_map"] = _pyCrazyCPP.CMesh_mesh_to_basis_map_get
    if _newclass:
        mesh_to_basis_map = _swig_property(_pyCrazyCPP.CMesh_mesh_to_basis_map_get, _pyCrazyCPP.CMesh_mesh_to_basis_map_set)
    __swig_setmethods__["face_to_materia_id"] = _pyCrazyCPP.CMesh_face_to_materia_id_set
    __swig_getmethods__["face_to_materia_id"] = _pyCrazyCPP.CMesh_face_to_materia_id_get
    if _newclass:
        face_to_materia_id = _swig_property(_pyCrazyCPP.CMesh_face_to_materia_id_get, _pyCrazyCPP.CMesh_face_to_materia_id_set)
    __swig_setmethods__["verticesFlag"] = _pyCrazyCPP.CMesh_verticesFlag_set
    __swig_getmethods__["verticesFlag"] = _pyCrazyCPP.CMesh_verticesFlag_get
    if _newclass:
        verticesFlag = _swig_property(_pyCrazyCPP.CMesh_verticesFlag_get, _pyCrazyCPP.CMesh_verticesFlag_set)
    __swig_setmethods__["trianglesFlag"] = _pyCrazyCPP.CMesh_trianglesFlag_set
    __swig_getmethods__["trianglesFlag"] = _pyCrazyCPP.CMesh_trianglesFlag_get
    if _newclass:
        trianglesFlag = _swig_property(_pyCrazyCPP.CMesh_trianglesFlag_get, _pyCrazyCPP.CMesh_trianglesFlag_set)
    __swig_setmethods__["vertices"] = _pyCrazyCPP.CMesh_vertices_set
    __swig_getmethods__["vertices"] = _pyCrazyCPP.CMesh_vertices_get
    if _newclass:
        vertices = _swig_property(_pyCrazyCPP.CMesh_vertices_get, _pyCrazyCPP.CMesh_vertices_set)
    __swig_setmethods__["stored_pts"] = _pyCrazyCPP.CMesh_stored_pts_set
    __swig_getmethods__["stored_pts"] = _pyCrazyCPP.CMesh_stored_pts_get
    if _newclass:
        stored_pts = _swig_property(_pyCrazyCPP.CMesh_stored_pts_get, _pyCrazyCPP.CMesh_stored_pts_set)
    __swig_setmethods__["vertex_normals"] = _pyCrazyCPP.CMesh_vertex_normals_set
    __swig_getmethods__["vertex_normals"] = _pyCrazyCPP.CMesh_vertex_normals_get
    if _newclass:
        vertex_normals = _swig_property(_pyCrazyCPP.CMesh_vertex_normals_get, _pyCrazyCPP.CMesh_vertex_normals_set)
    __swig_setmethods__["face_normals"] = _pyCrazyCPP.CMesh_face_normals_set
    __swig_getmethods__["face_normals"] = _pyCrazyCPP.CMesh_face_normals_get
    if _newclass:
        face_normals = _swig_property(_pyCrazyCPP.CMesh_face_normals_get, _pyCrazyCPP.CMesh_face_normals_set)
    __swig_setmethods__["vertices_uv"] = _pyCrazyCPP.CMesh_vertices_uv_set
    __swig_getmethods__["vertices_uv"] = _pyCrazyCPP.CMesh_vertices_uv_get
    if _newclass:
        vertices_uv = _swig_property(_pyCrazyCPP.CMesh_vertices_uv_get, _pyCrazyCPP.CMesh_vertices_uv_set)
    __swig_setmethods__["origin_uv"] = _pyCrazyCPP.CMesh_origin_uv_set
    __swig_getmethods__["origin_uv"] = _pyCrazyCPP.CMesh_origin_uv_get
    if _newclass:
        origin_uv = _swig_property(_pyCrazyCPP.CMesh_origin_uv_get, _pyCrazyCPP.CMesh_origin_uv_set)
    __swig_setmethods__["textures"] = _pyCrazyCPP.CMesh_textures_set
    __swig_getmethods__["textures"] = _pyCrazyCPP.CMesh_textures_get
    if _newclass:
        textures = _swig_property(_pyCrazyCPP.CMesh_textures_get, _pyCrazyCPP.CMesh_textures_set)
    __swig_setmethods__["texture_names"] = _pyCrazyCPP.CMesh_texture_names_set
    __swig_getmethods__["texture_names"] = _pyCrazyCPP.CMesh_texture_names_get
    if _newclass:
        texture_names = _swig_property(_pyCrazyCPP.CMesh_texture_names_get, _pyCrazyCPP.CMesh_texture_names_set)
    __swig_setmethods__["name_texture"] = _pyCrazyCPP.CMesh_name_texture_set
    __swig_getmethods__["name_texture"] = _pyCrazyCPP.CMesh_name_texture_get
    if _newclass:
        name_texture = _swig_property(_pyCrazyCPP.CMesh_name_texture_get, _pyCrazyCPP.CMesh_name_texture_set)
    __swig_setmethods__["max"] = _pyCrazyCPP.CMesh_max_set
    __swig_getmethods__["max"] = _pyCrazyCPP.CMesh_max_get
    if _newclass:
        max = _swig_property(_pyCrazyCPP.CMesh_max_get, _pyCrazyCPP.CMesh_max_set)
    __swig_setmethods__["min"] = _pyCrazyCPP.CMesh_min_set
    __swig_getmethods__["min"] = _pyCrazyCPP.CMesh_min_get
    if _newclass:
        min = _swig_property(_pyCrazyCPP.CMesh_min_get, _pyCrazyCPP.CMesh_min_set)
CMesh_swigregister = _pyCrazyCPP.CMesh_swigregister
CMesh_swigregister(CMesh)

class Mesh(CMesh):
    __swig_setmethods__ = {}
    for _s in [CMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [CMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyCrazyCPP.new_Mesh()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_Mesh
    __del__ = lambda self: None

    def IsEmpty(self):
        return _pyCrazyCPP.Mesh_IsEmpty(self)

    def clear(self):
        return _pyCrazyCPP.Mesh_clear(self)

    def add_mesh(self, m):
        return _pyCrazyCPP.Mesh_add_mesh(self, m)

    def __iadd__(self, m):
        return _pyCrazyCPP.Mesh___iadd__(self, m)
Mesh_swigregister = _pyCrazyCPP.Mesh_swigregister
Mesh_swigregister(Mesh)


def SplitString(s, delim):
    return _pyCrazyCPP.SplitString(s, delim)
SplitString = _pyCrazyCPP.SplitString

def ReadMat(data_mat, path):
    return _pyCrazyCPP.ReadMat(data_mat, path)
ReadMat = _pyCrazyCPP.ReadMat

def GetBaseDir(filepath):
    return _pyCrazyCPP.GetBaseDir(filepath)
GetBaseDir = _pyCrazyCPP.GetBaseDir

def TinyLoadOBJ(mesh, obj_path, scale=1, tri_offset=0):
    return _pyCrazyCPP.TinyLoadOBJ(mesh, obj_path, scale, tri_offset)
TinyLoadOBJ = _pyCrazyCPP.TinyLoadOBJ

def LoadBasis2(file_name):
    return _pyCrazyCPP.LoadBasis2(file_name)
LoadBasis2 = _pyCrazyCPP.LoadBasis2

def LoadBasis(file_name):
    return _pyCrazyCPP.LoadBasis(file_name)
LoadBasis = _pyCrazyCPP.LoadBasis

def LoadEigenValues(file_name):
    return _pyCrazyCPP.LoadEigenValues(file_name)
LoadEigenValues = _pyCrazyCPP.LoadEigenValues

def save_tensor(filename_out, mat, m_nVertices, m_nExpressions, m_nIdentities):
    return _pyCrazyCPP.save_tensor(filename_out, mat, m_nVertices, m_nExpressions, m_nIdentities)
save_tensor = _pyCrazyCPP.save_tensor

def ReadLandmarks(mesh, path):
    return _pyCrazyCPP.ReadLandmarks(mesh, path)
ReadLandmarks = _pyCrazyCPP.ReadLandmarks

def WriteOBJ(mesh, obj_path, scale, tri_offset):
    return _pyCrazyCPP.WriteOBJ(mesh, obj_path, scale, tri_offset)
WriteOBJ = _pyCrazyCPP.WriteOBJ

def ReadVector2DMat(path):
    return _pyCrazyCPP.ReadVector2DMat(path)
ReadVector2DMat = _pyCrazyCPP.ReadVector2DMat

def ReadVector(*args):
    return _pyCrazyCPP.ReadVector(*args)
ReadVector = _pyCrazyCPP.ReadVector

def ReadSelectedIds(id_vector, Human_to_selected_Head_UsedVertices_index, path):
    return _pyCrazyCPP.ReadSelectedIds(id_vector, Human_to_selected_Head_UsedVertices_index, path)
ReadSelectedIds = _pyCrazyCPP.ReadSelectedIds

def SaveFacesVids(face_map, mesh, obj_path):
    return _pyCrazyCPP.SaveFacesVids(face_map, mesh, obj_path)
SaveFacesVids = _pyCrazyCPP.SaveFacesVids

def SaveVector(list, obj_path):
    return _pyCrazyCPP.SaveVector(list, obj_path)
SaveVector = _pyCrazyCPP.SaveVector

def SaveVectors(lists, obj_path):
    return _pyCrazyCPP.SaveVectors(lists, obj_path)
SaveVectors = _pyCrazyCPP.SaveVectors

def SaveCArrays(lists, obj_path):
    return _pyCrazyCPP.SaveCArrays(lists, obj_path)
SaveCArrays = _pyCrazyCPP.SaveCArrays

def SaveMap(map, obj_path):
    return _pyCrazyCPP.SaveMap(map, obj_path)
SaveMap = _pyCrazyCPP.SaveMap

def LoadTexture(root_path, mesh, texture_scale=1):
    return _pyCrazyCPP.LoadTexture(root_path, mesh, texture_scale)
LoadTexture = _pyCrazyCPP.LoadTexture

def ReadMap(map, path, inverse=False):
    return _pyCrazyCPP.ReadMap(map, path, inverse)
ReadMap = _pyCrazyCPP.ReadMap

def readMatBinary(ifs, in_mat):
    return _pyCrazyCPP.readMatBinary(ifs, in_mat)
readMatBinary = _pyCrazyCPP.readMatBinary

def SaveMatBinary(filename, output):
    return _pyCrazyCPP.SaveMatBinary(filename, output)
SaveMatBinary = _pyCrazyCPP.SaveMatBinary

def LoadMatBinary(filename, intput):
    return _pyCrazyCPP.LoadMatBinary(filename, intput)
LoadMatBinary = _pyCrazyCPP.LoadMatBinary

def LoadMatBinary2Dmat(filename):
    return _pyCrazyCPP.LoadMatBinary2Dmat(filename)
LoadMatBinary2Dmat = _pyCrazyCPP.LoadMatBinary2Dmat

def SaveDMat2BinaryCVMat(filename, data):
    return _pyCrazyCPP.SaveDMat2BinaryCVMat(filename, data)
SaveDMat2BinaryCVMat = _pyCrazyCPP.SaveDMat2BinaryCVMat

_pyCrazyCPP.TEXTURE_TYPE_NONE_swigconstant(_pyCrazyCPP)
TEXTURE_TYPE_NONE = _pyCrazyCPP.TEXTURE_TYPE_NONE

_pyCrazyCPP.TEXTURE_TYPE_SPHERE_swigconstant(_pyCrazyCPP)
TEXTURE_TYPE_SPHERE = _pyCrazyCPP.TEXTURE_TYPE_SPHERE

_pyCrazyCPP.TEXTURE_TYPE_CUBE_TOP_swigconstant(_pyCrazyCPP)
TEXTURE_TYPE_CUBE_TOP = _pyCrazyCPP.TEXTURE_TYPE_CUBE_TOP

_pyCrazyCPP.TEXTURE_TYPE_CUBE_BOTTOM_swigconstant(_pyCrazyCPP)
TEXTURE_TYPE_CUBE_BOTTOM = _pyCrazyCPP.TEXTURE_TYPE_CUBE_BOTTOM

_pyCrazyCPP.TEXTURE_TYPE_CUBE_FRONT_swigconstant(_pyCrazyCPP)
TEXTURE_TYPE_CUBE_FRONT = _pyCrazyCPP.TEXTURE_TYPE_CUBE_FRONT

_pyCrazyCPP.TEXTURE_TYPE_CUBE_BACK_swigconstant(_pyCrazyCPP)
TEXTURE_TYPE_CUBE_BACK = _pyCrazyCPP.TEXTURE_TYPE_CUBE_BACK

_pyCrazyCPP.TEXTURE_TYPE_CUBE_LEFT_swigconstant(_pyCrazyCPP)
TEXTURE_TYPE_CUBE_LEFT = _pyCrazyCPP.TEXTURE_TYPE_CUBE_LEFT

_pyCrazyCPP.TEXTURE_TYPE_CUBE_RIGHT_swigconstant(_pyCrazyCPP)
TEXTURE_TYPE_CUBE_RIGHT = _pyCrazyCPP.TEXTURE_TYPE_CUBE_RIGHT
class texture_option_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, texture_option_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, texture_option_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pyCrazyCPP.texture_option_t_type_set
    __swig_getmethods__["type"] = _pyCrazyCPP.texture_option_t_type_get
    if _newclass:
        type = _swig_property(_pyCrazyCPP.texture_option_t_type_get, _pyCrazyCPP.texture_option_t_type_set)
    __swig_setmethods__["sharpness"] = _pyCrazyCPP.texture_option_t_sharpness_set
    __swig_getmethods__["sharpness"] = _pyCrazyCPP.texture_option_t_sharpness_get
    if _newclass:
        sharpness = _swig_property(_pyCrazyCPP.texture_option_t_sharpness_get, _pyCrazyCPP.texture_option_t_sharpness_set)
    __swig_setmethods__["brightness"] = _pyCrazyCPP.texture_option_t_brightness_set
    __swig_getmethods__["brightness"] = _pyCrazyCPP.texture_option_t_brightness_get
    if _newclass:
        brightness = _swig_property(_pyCrazyCPP.texture_option_t_brightness_get, _pyCrazyCPP.texture_option_t_brightness_set)
    __swig_setmethods__["contrast"] = _pyCrazyCPP.texture_option_t_contrast_set
    __swig_getmethods__["contrast"] = _pyCrazyCPP.texture_option_t_contrast_get
    if _newclass:
        contrast = _swig_property(_pyCrazyCPP.texture_option_t_contrast_get, _pyCrazyCPP.texture_option_t_contrast_set)
    __swig_setmethods__["origin_offset"] = _pyCrazyCPP.texture_option_t_origin_offset_set
    __swig_getmethods__["origin_offset"] = _pyCrazyCPP.texture_option_t_origin_offset_get
    if _newclass:
        origin_offset = _swig_property(_pyCrazyCPP.texture_option_t_origin_offset_get, _pyCrazyCPP.texture_option_t_origin_offset_set)
    __swig_setmethods__["scale"] = _pyCrazyCPP.texture_option_t_scale_set
    __swig_getmethods__["scale"] = _pyCrazyCPP.texture_option_t_scale_get
    if _newclass:
        scale = _swig_property(_pyCrazyCPP.texture_option_t_scale_get, _pyCrazyCPP.texture_option_t_scale_set)
    __swig_setmethods__["turbulence"] = _pyCrazyCPP.texture_option_t_turbulence_set
    __swig_getmethods__["turbulence"] = _pyCrazyCPP.texture_option_t_turbulence_get
    if _newclass:
        turbulence = _swig_property(_pyCrazyCPP.texture_option_t_turbulence_get, _pyCrazyCPP.texture_option_t_turbulence_set)
    __swig_setmethods__["clamp"] = _pyCrazyCPP.texture_option_t_clamp_set
    __swig_getmethods__["clamp"] = _pyCrazyCPP.texture_option_t_clamp_get
    if _newclass:
        clamp = _swig_property(_pyCrazyCPP.texture_option_t_clamp_get, _pyCrazyCPP.texture_option_t_clamp_set)
    __swig_setmethods__["imfchan"] = _pyCrazyCPP.texture_option_t_imfchan_set
    __swig_getmethods__["imfchan"] = _pyCrazyCPP.texture_option_t_imfchan_get
    if _newclass:
        imfchan = _swig_property(_pyCrazyCPP.texture_option_t_imfchan_get, _pyCrazyCPP.texture_option_t_imfchan_set)
    __swig_setmethods__["blendu"] = _pyCrazyCPP.texture_option_t_blendu_set
    __swig_getmethods__["blendu"] = _pyCrazyCPP.texture_option_t_blendu_get
    if _newclass:
        blendu = _swig_property(_pyCrazyCPP.texture_option_t_blendu_get, _pyCrazyCPP.texture_option_t_blendu_set)
    __swig_setmethods__["blendv"] = _pyCrazyCPP.texture_option_t_blendv_set
    __swig_getmethods__["blendv"] = _pyCrazyCPP.texture_option_t_blendv_get
    if _newclass:
        blendv = _swig_property(_pyCrazyCPP.texture_option_t_blendv_get, _pyCrazyCPP.texture_option_t_blendv_set)
    __swig_setmethods__["bump_multiplier"] = _pyCrazyCPP.texture_option_t_bump_multiplier_set
    __swig_getmethods__["bump_multiplier"] = _pyCrazyCPP.texture_option_t_bump_multiplier_get
    if _newclass:
        bump_multiplier = _swig_property(_pyCrazyCPP.texture_option_t_bump_multiplier_get, _pyCrazyCPP.texture_option_t_bump_multiplier_set)

    def __init__(self):
        this = _pyCrazyCPP.new_texture_option_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_texture_option_t
    __del__ = lambda self: None
texture_option_t_swigregister = _pyCrazyCPP.texture_option_t_swigregister
texture_option_t_swigregister(texture_option_t)

class material_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, material_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, material_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pyCrazyCPP.material_t_name_set
    __swig_getmethods__["name"] = _pyCrazyCPP.material_t_name_get
    if _newclass:
        name = _swig_property(_pyCrazyCPP.material_t_name_get, _pyCrazyCPP.material_t_name_set)
    __swig_setmethods__["ambient"] = _pyCrazyCPP.material_t_ambient_set
    __swig_getmethods__["ambient"] = _pyCrazyCPP.material_t_ambient_get
    if _newclass:
        ambient = _swig_property(_pyCrazyCPP.material_t_ambient_get, _pyCrazyCPP.material_t_ambient_set)
    __swig_setmethods__["diffuse"] = _pyCrazyCPP.material_t_diffuse_set
    __swig_getmethods__["diffuse"] = _pyCrazyCPP.material_t_diffuse_get
    if _newclass:
        diffuse = _swig_property(_pyCrazyCPP.material_t_diffuse_get, _pyCrazyCPP.material_t_diffuse_set)
    __swig_setmethods__["specular"] = _pyCrazyCPP.material_t_specular_set
    __swig_getmethods__["specular"] = _pyCrazyCPP.material_t_specular_get
    if _newclass:
        specular = _swig_property(_pyCrazyCPP.material_t_specular_get, _pyCrazyCPP.material_t_specular_set)
    __swig_setmethods__["transmittance"] = _pyCrazyCPP.material_t_transmittance_set
    __swig_getmethods__["transmittance"] = _pyCrazyCPP.material_t_transmittance_get
    if _newclass:
        transmittance = _swig_property(_pyCrazyCPP.material_t_transmittance_get, _pyCrazyCPP.material_t_transmittance_set)
    __swig_setmethods__["emission"] = _pyCrazyCPP.material_t_emission_set
    __swig_getmethods__["emission"] = _pyCrazyCPP.material_t_emission_get
    if _newclass:
        emission = _swig_property(_pyCrazyCPP.material_t_emission_get, _pyCrazyCPP.material_t_emission_set)
    __swig_setmethods__["shininess"] = _pyCrazyCPP.material_t_shininess_set
    __swig_getmethods__["shininess"] = _pyCrazyCPP.material_t_shininess_get
    if _newclass:
        shininess = _swig_property(_pyCrazyCPP.material_t_shininess_get, _pyCrazyCPP.material_t_shininess_set)
    __swig_setmethods__["ior"] = _pyCrazyCPP.material_t_ior_set
    __swig_getmethods__["ior"] = _pyCrazyCPP.material_t_ior_get
    if _newclass:
        ior = _swig_property(_pyCrazyCPP.material_t_ior_get, _pyCrazyCPP.material_t_ior_set)
    __swig_setmethods__["dissolve"] = _pyCrazyCPP.material_t_dissolve_set
    __swig_getmethods__["dissolve"] = _pyCrazyCPP.material_t_dissolve_get
    if _newclass:
        dissolve = _swig_property(_pyCrazyCPP.material_t_dissolve_get, _pyCrazyCPP.material_t_dissolve_set)
    __swig_setmethods__["illum"] = _pyCrazyCPP.material_t_illum_set
    __swig_getmethods__["illum"] = _pyCrazyCPP.material_t_illum_get
    if _newclass:
        illum = _swig_property(_pyCrazyCPP.material_t_illum_get, _pyCrazyCPP.material_t_illum_set)
    __swig_setmethods__["dummy"] = _pyCrazyCPP.material_t_dummy_set
    __swig_getmethods__["dummy"] = _pyCrazyCPP.material_t_dummy_get
    if _newclass:
        dummy = _swig_property(_pyCrazyCPP.material_t_dummy_get, _pyCrazyCPP.material_t_dummy_set)
    __swig_setmethods__["ambient_texname"] = _pyCrazyCPP.material_t_ambient_texname_set
    __swig_getmethods__["ambient_texname"] = _pyCrazyCPP.material_t_ambient_texname_get
    if _newclass:
        ambient_texname = _swig_property(_pyCrazyCPP.material_t_ambient_texname_get, _pyCrazyCPP.material_t_ambient_texname_set)
    __swig_setmethods__["diffuse_texname"] = _pyCrazyCPP.material_t_diffuse_texname_set
    __swig_getmethods__["diffuse_texname"] = _pyCrazyCPP.material_t_diffuse_texname_get
    if _newclass:
        diffuse_texname = _swig_property(_pyCrazyCPP.material_t_diffuse_texname_get, _pyCrazyCPP.material_t_diffuse_texname_set)
    __swig_setmethods__["specular_texname"] = _pyCrazyCPP.material_t_specular_texname_set
    __swig_getmethods__["specular_texname"] = _pyCrazyCPP.material_t_specular_texname_get
    if _newclass:
        specular_texname = _swig_property(_pyCrazyCPP.material_t_specular_texname_get, _pyCrazyCPP.material_t_specular_texname_set)
    __swig_setmethods__["specular_highlight_texname"] = _pyCrazyCPP.material_t_specular_highlight_texname_set
    __swig_getmethods__["specular_highlight_texname"] = _pyCrazyCPP.material_t_specular_highlight_texname_get
    if _newclass:
        specular_highlight_texname = _swig_property(_pyCrazyCPP.material_t_specular_highlight_texname_get, _pyCrazyCPP.material_t_specular_highlight_texname_set)
    __swig_setmethods__["bump_texname"] = _pyCrazyCPP.material_t_bump_texname_set
    __swig_getmethods__["bump_texname"] = _pyCrazyCPP.material_t_bump_texname_get
    if _newclass:
        bump_texname = _swig_property(_pyCrazyCPP.material_t_bump_texname_get, _pyCrazyCPP.material_t_bump_texname_set)
    __swig_setmethods__["displacement_texname"] = _pyCrazyCPP.material_t_displacement_texname_set
    __swig_getmethods__["displacement_texname"] = _pyCrazyCPP.material_t_displacement_texname_get
    if _newclass:
        displacement_texname = _swig_property(_pyCrazyCPP.material_t_displacement_texname_get, _pyCrazyCPP.material_t_displacement_texname_set)
    __swig_setmethods__["alpha_texname"] = _pyCrazyCPP.material_t_alpha_texname_set
    __swig_getmethods__["alpha_texname"] = _pyCrazyCPP.material_t_alpha_texname_get
    if _newclass:
        alpha_texname = _swig_property(_pyCrazyCPP.material_t_alpha_texname_get, _pyCrazyCPP.material_t_alpha_texname_set)
    __swig_setmethods__["reflection_texname"] = _pyCrazyCPP.material_t_reflection_texname_set
    __swig_getmethods__["reflection_texname"] = _pyCrazyCPP.material_t_reflection_texname_get
    if _newclass:
        reflection_texname = _swig_property(_pyCrazyCPP.material_t_reflection_texname_get, _pyCrazyCPP.material_t_reflection_texname_set)
    __swig_setmethods__["ambient_texopt"] = _pyCrazyCPP.material_t_ambient_texopt_set
    __swig_getmethods__["ambient_texopt"] = _pyCrazyCPP.material_t_ambient_texopt_get
    if _newclass:
        ambient_texopt = _swig_property(_pyCrazyCPP.material_t_ambient_texopt_get, _pyCrazyCPP.material_t_ambient_texopt_set)
    __swig_setmethods__["diffuse_texopt"] = _pyCrazyCPP.material_t_diffuse_texopt_set
    __swig_getmethods__["diffuse_texopt"] = _pyCrazyCPP.material_t_diffuse_texopt_get
    if _newclass:
        diffuse_texopt = _swig_property(_pyCrazyCPP.material_t_diffuse_texopt_get, _pyCrazyCPP.material_t_diffuse_texopt_set)
    __swig_setmethods__["specular_texopt"] = _pyCrazyCPP.material_t_specular_texopt_set
    __swig_getmethods__["specular_texopt"] = _pyCrazyCPP.material_t_specular_texopt_get
    if _newclass:
        specular_texopt = _swig_property(_pyCrazyCPP.material_t_specular_texopt_get, _pyCrazyCPP.material_t_specular_texopt_set)
    __swig_setmethods__["specular_highlight_texopt"] = _pyCrazyCPP.material_t_specular_highlight_texopt_set
    __swig_getmethods__["specular_highlight_texopt"] = _pyCrazyCPP.material_t_specular_highlight_texopt_get
    if _newclass:
        specular_highlight_texopt = _swig_property(_pyCrazyCPP.material_t_specular_highlight_texopt_get, _pyCrazyCPP.material_t_specular_highlight_texopt_set)
    __swig_setmethods__["bump_texopt"] = _pyCrazyCPP.material_t_bump_texopt_set
    __swig_getmethods__["bump_texopt"] = _pyCrazyCPP.material_t_bump_texopt_get
    if _newclass:
        bump_texopt = _swig_property(_pyCrazyCPP.material_t_bump_texopt_get, _pyCrazyCPP.material_t_bump_texopt_set)
    __swig_setmethods__["displacement_texopt"] = _pyCrazyCPP.material_t_displacement_texopt_set
    __swig_getmethods__["displacement_texopt"] = _pyCrazyCPP.material_t_displacement_texopt_get
    if _newclass:
        displacement_texopt = _swig_property(_pyCrazyCPP.material_t_displacement_texopt_get, _pyCrazyCPP.material_t_displacement_texopt_set)
    __swig_setmethods__["alpha_texopt"] = _pyCrazyCPP.material_t_alpha_texopt_set
    __swig_getmethods__["alpha_texopt"] = _pyCrazyCPP.material_t_alpha_texopt_get
    if _newclass:
        alpha_texopt = _swig_property(_pyCrazyCPP.material_t_alpha_texopt_get, _pyCrazyCPP.material_t_alpha_texopt_set)
    __swig_setmethods__["reflection_texopt"] = _pyCrazyCPP.material_t_reflection_texopt_set
    __swig_getmethods__["reflection_texopt"] = _pyCrazyCPP.material_t_reflection_texopt_get
    if _newclass:
        reflection_texopt = _swig_property(_pyCrazyCPP.material_t_reflection_texopt_get, _pyCrazyCPP.material_t_reflection_texopt_set)
    __swig_setmethods__["roughness"] = _pyCrazyCPP.material_t_roughness_set
    __swig_getmethods__["roughness"] = _pyCrazyCPP.material_t_roughness_get
    if _newclass:
        roughness = _swig_property(_pyCrazyCPP.material_t_roughness_get, _pyCrazyCPP.material_t_roughness_set)
    __swig_setmethods__["metallic"] = _pyCrazyCPP.material_t_metallic_set
    __swig_getmethods__["metallic"] = _pyCrazyCPP.material_t_metallic_get
    if _newclass:
        metallic = _swig_property(_pyCrazyCPP.material_t_metallic_get, _pyCrazyCPP.material_t_metallic_set)
    __swig_setmethods__["sheen"] = _pyCrazyCPP.material_t_sheen_set
    __swig_getmethods__["sheen"] = _pyCrazyCPP.material_t_sheen_get
    if _newclass:
        sheen = _swig_property(_pyCrazyCPP.material_t_sheen_get, _pyCrazyCPP.material_t_sheen_set)
    __swig_setmethods__["clearcoat_thickness"] = _pyCrazyCPP.material_t_clearcoat_thickness_set
    __swig_getmethods__["clearcoat_thickness"] = _pyCrazyCPP.material_t_clearcoat_thickness_get
    if _newclass:
        clearcoat_thickness = _swig_property(_pyCrazyCPP.material_t_clearcoat_thickness_get, _pyCrazyCPP.material_t_clearcoat_thickness_set)
    __swig_setmethods__["clearcoat_roughness"] = _pyCrazyCPP.material_t_clearcoat_roughness_set
    __swig_getmethods__["clearcoat_roughness"] = _pyCrazyCPP.material_t_clearcoat_roughness_get
    if _newclass:
        clearcoat_roughness = _swig_property(_pyCrazyCPP.material_t_clearcoat_roughness_get, _pyCrazyCPP.material_t_clearcoat_roughness_set)
    __swig_setmethods__["anisotropy"] = _pyCrazyCPP.material_t_anisotropy_set
    __swig_getmethods__["anisotropy"] = _pyCrazyCPP.material_t_anisotropy_get
    if _newclass:
        anisotropy = _swig_property(_pyCrazyCPP.material_t_anisotropy_get, _pyCrazyCPP.material_t_anisotropy_set)
    __swig_setmethods__["anisotropy_rotation"] = _pyCrazyCPP.material_t_anisotropy_rotation_set
    __swig_getmethods__["anisotropy_rotation"] = _pyCrazyCPP.material_t_anisotropy_rotation_get
    if _newclass:
        anisotropy_rotation = _swig_property(_pyCrazyCPP.material_t_anisotropy_rotation_get, _pyCrazyCPP.material_t_anisotropy_rotation_set)
    __swig_setmethods__["pad0"] = _pyCrazyCPP.material_t_pad0_set
    __swig_getmethods__["pad0"] = _pyCrazyCPP.material_t_pad0_get
    if _newclass:
        pad0 = _swig_property(_pyCrazyCPP.material_t_pad0_get, _pyCrazyCPP.material_t_pad0_set)
    __swig_setmethods__["roughness_texname"] = _pyCrazyCPP.material_t_roughness_texname_set
    __swig_getmethods__["roughness_texname"] = _pyCrazyCPP.material_t_roughness_texname_get
    if _newclass:
        roughness_texname = _swig_property(_pyCrazyCPP.material_t_roughness_texname_get, _pyCrazyCPP.material_t_roughness_texname_set)
    __swig_setmethods__["metallic_texname"] = _pyCrazyCPP.material_t_metallic_texname_set
    __swig_getmethods__["metallic_texname"] = _pyCrazyCPP.material_t_metallic_texname_get
    if _newclass:
        metallic_texname = _swig_property(_pyCrazyCPP.material_t_metallic_texname_get, _pyCrazyCPP.material_t_metallic_texname_set)
    __swig_setmethods__["sheen_texname"] = _pyCrazyCPP.material_t_sheen_texname_set
    __swig_getmethods__["sheen_texname"] = _pyCrazyCPP.material_t_sheen_texname_get
    if _newclass:
        sheen_texname = _swig_property(_pyCrazyCPP.material_t_sheen_texname_get, _pyCrazyCPP.material_t_sheen_texname_set)
    __swig_setmethods__["emissive_texname"] = _pyCrazyCPP.material_t_emissive_texname_set
    __swig_getmethods__["emissive_texname"] = _pyCrazyCPP.material_t_emissive_texname_get
    if _newclass:
        emissive_texname = _swig_property(_pyCrazyCPP.material_t_emissive_texname_get, _pyCrazyCPP.material_t_emissive_texname_set)
    __swig_setmethods__["normal_texname"] = _pyCrazyCPP.material_t_normal_texname_set
    __swig_getmethods__["normal_texname"] = _pyCrazyCPP.material_t_normal_texname_get
    if _newclass:
        normal_texname = _swig_property(_pyCrazyCPP.material_t_normal_texname_get, _pyCrazyCPP.material_t_normal_texname_set)
    __swig_setmethods__["roughness_texopt"] = _pyCrazyCPP.material_t_roughness_texopt_set
    __swig_getmethods__["roughness_texopt"] = _pyCrazyCPP.material_t_roughness_texopt_get
    if _newclass:
        roughness_texopt = _swig_property(_pyCrazyCPP.material_t_roughness_texopt_get, _pyCrazyCPP.material_t_roughness_texopt_set)
    __swig_setmethods__["metallic_texopt"] = _pyCrazyCPP.material_t_metallic_texopt_set
    __swig_getmethods__["metallic_texopt"] = _pyCrazyCPP.material_t_metallic_texopt_get
    if _newclass:
        metallic_texopt = _swig_property(_pyCrazyCPP.material_t_metallic_texopt_get, _pyCrazyCPP.material_t_metallic_texopt_set)
    __swig_setmethods__["sheen_texopt"] = _pyCrazyCPP.material_t_sheen_texopt_set
    __swig_getmethods__["sheen_texopt"] = _pyCrazyCPP.material_t_sheen_texopt_get
    if _newclass:
        sheen_texopt = _swig_property(_pyCrazyCPP.material_t_sheen_texopt_get, _pyCrazyCPP.material_t_sheen_texopt_set)
    __swig_setmethods__["emissive_texopt"] = _pyCrazyCPP.material_t_emissive_texopt_set
    __swig_getmethods__["emissive_texopt"] = _pyCrazyCPP.material_t_emissive_texopt_get
    if _newclass:
        emissive_texopt = _swig_property(_pyCrazyCPP.material_t_emissive_texopt_get, _pyCrazyCPP.material_t_emissive_texopt_set)
    __swig_setmethods__["normal_texopt"] = _pyCrazyCPP.material_t_normal_texopt_set
    __swig_getmethods__["normal_texopt"] = _pyCrazyCPP.material_t_normal_texopt_get
    if _newclass:
        normal_texopt = _swig_property(_pyCrazyCPP.material_t_normal_texopt_get, _pyCrazyCPP.material_t_normal_texopt_set)
    __swig_setmethods__["pad2"] = _pyCrazyCPP.material_t_pad2_set
    __swig_getmethods__["pad2"] = _pyCrazyCPP.material_t_pad2_get
    if _newclass:
        pad2 = _swig_property(_pyCrazyCPP.material_t_pad2_get, _pyCrazyCPP.material_t_pad2_set)
    __swig_setmethods__["unknown_parameter"] = _pyCrazyCPP.material_t_unknown_parameter_set
    __swig_getmethods__["unknown_parameter"] = _pyCrazyCPP.material_t_unknown_parameter_get
    if _newclass:
        unknown_parameter = _swig_property(_pyCrazyCPP.material_t_unknown_parameter_get, _pyCrazyCPP.material_t_unknown_parameter_set)

    def __init__(self):
        this = _pyCrazyCPP.new_material_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_material_t
    __del__ = lambda self: None
material_t_swigregister = _pyCrazyCPP.material_t_swigregister
material_t_swigregister(material_t)

class tag_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tag_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tag_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pyCrazyCPP.tag_t_name_set
    __swig_getmethods__["name"] = _pyCrazyCPP.tag_t_name_get
    if _newclass:
        name = _swig_property(_pyCrazyCPP.tag_t_name_get, _pyCrazyCPP.tag_t_name_set)
    __swig_setmethods__["intValues"] = _pyCrazyCPP.tag_t_intValues_set
    __swig_getmethods__["intValues"] = _pyCrazyCPP.tag_t_intValues_get
    if _newclass:
        intValues = _swig_property(_pyCrazyCPP.tag_t_intValues_get, _pyCrazyCPP.tag_t_intValues_set)
    __swig_setmethods__["floatValues"] = _pyCrazyCPP.tag_t_floatValues_set
    __swig_getmethods__["floatValues"] = _pyCrazyCPP.tag_t_floatValues_get
    if _newclass:
        floatValues = _swig_property(_pyCrazyCPP.tag_t_floatValues_get, _pyCrazyCPP.tag_t_floatValues_set)
    __swig_setmethods__["stringValues"] = _pyCrazyCPP.tag_t_stringValues_set
    __swig_getmethods__["stringValues"] = _pyCrazyCPP.tag_t_stringValues_get
    if _newclass:
        stringValues = _swig_property(_pyCrazyCPP.tag_t_stringValues_get, _pyCrazyCPP.tag_t_stringValues_set)

    def __init__(self):
        this = _pyCrazyCPP.new_tag_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_tag_t
    __del__ = lambda self: None
tag_t_swigregister = _pyCrazyCPP.tag_t_swigregister
tag_t_swigregister(tag_t)

class index_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, index_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, index_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertex_index"] = _pyCrazyCPP.index_t_vertex_index_set
    __swig_getmethods__["vertex_index"] = _pyCrazyCPP.index_t_vertex_index_get
    if _newclass:
        vertex_index = _swig_property(_pyCrazyCPP.index_t_vertex_index_get, _pyCrazyCPP.index_t_vertex_index_set)
    __swig_setmethods__["normal_index"] = _pyCrazyCPP.index_t_normal_index_set
    __swig_getmethods__["normal_index"] = _pyCrazyCPP.index_t_normal_index_get
    if _newclass:
        normal_index = _swig_property(_pyCrazyCPP.index_t_normal_index_get, _pyCrazyCPP.index_t_normal_index_set)
    __swig_setmethods__["texcoord_index"] = _pyCrazyCPP.index_t_texcoord_index_set
    __swig_getmethods__["texcoord_index"] = _pyCrazyCPP.index_t_texcoord_index_get
    if _newclass:
        texcoord_index = _swig_property(_pyCrazyCPP.index_t_texcoord_index_get, _pyCrazyCPP.index_t_texcoord_index_set)

    def __init__(self):
        this = _pyCrazyCPP.new_index_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_index_t
    __del__ = lambda self: None
index_t_swigregister = _pyCrazyCPP.index_t_swigregister
index_t_swigregister(index_t)

class mesh_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mesh_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mesh_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["indices"] = _pyCrazyCPP.mesh_t_indices_set
    __swig_getmethods__["indices"] = _pyCrazyCPP.mesh_t_indices_get
    if _newclass:
        indices = _swig_property(_pyCrazyCPP.mesh_t_indices_get, _pyCrazyCPP.mesh_t_indices_set)
    __swig_setmethods__["num_face_vertices"] = _pyCrazyCPP.mesh_t_num_face_vertices_set
    __swig_getmethods__["num_face_vertices"] = _pyCrazyCPP.mesh_t_num_face_vertices_get
    if _newclass:
        num_face_vertices = _swig_property(_pyCrazyCPP.mesh_t_num_face_vertices_get, _pyCrazyCPP.mesh_t_num_face_vertices_set)
    __swig_setmethods__["material_ids"] = _pyCrazyCPP.mesh_t_material_ids_set
    __swig_getmethods__["material_ids"] = _pyCrazyCPP.mesh_t_material_ids_get
    if _newclass:
        material_ids = _swig_property(_pyCrazyCPP.mesh_t_material_ids_get, _pyCrazyCPP.mesh_t_material_ids_set)
    __swig_setmethods__["tags"] = _pyCrazyCPP.mesh_t_tags_set
    __swig_getmethods__["tags"] = _pyCrazyCPP.mesh_t_tags_get
    if _newclass:
        tags = _swig_property(_pyCrazyCPP.mesh_t_tags_get, _pyCrazyCPP.mesh_t_tags_set)

    def __init__(self):
        this = _pyCrazyCPP.new_mesh_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_mesh_t
    __del__ = lambda self: None
mesh_t_swigregister = _pyCrazyCPP.mesh_t_swigregister
mesh_t_swigregister(mesh_t)

class shape_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shape_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shape_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pyCrazyCPP.shape_t_name_set
    __swig_getmethods__["name"] = _pyCrazyCPP.shape_t_name_get
    if _newclass:
        name = _swig_property(_pyCrazyCPP.shape_t_name_get, _pyCrazyCPP.shape_t_name_set)
    __swig_setmethods__["mesh"] = _pyCrazyCPP.shape_t_mesh_set
    __swig_getmethods__["mesh"] = _pyCrazyCPP.shape_t_mesh_get
    if _newclass:
        mesh = _swig_property(_pyCrazyCPP.shape_t_mesh_get, _pyCrazyCPP.shape_t_mesh_set)

    def __init__(self):
        this = _pyCrazyCPP.new_shape_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_shape_t
    __del__ = lambda self: None
shape_t_swigregister = _pyCrazyCPP.shape_t_swigregister
shape_t_swigregister(shape_t)

class attrib_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, attrib_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, attrib_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertices"] = _pyCrazyCPP.attrib_t_vertices_set
    __swig_getmethods__["vertices"] = _pyCrazyCPP.attrib_t_vertices_get
    if _newclass:
        vertices = _swig_property(_pyCrazyCPP.attrib_t_vertices_get, _pyCrazyCPP.attrib_t_vertices_set)
    __swig_setmethods__["normals"] = _pyCrazyCPP.attrib_t_normals_set
    __swig_getmethods__["normals"] = _pyCrazyCPP.attrib_t_normals_get
    if _newclass:
        normals = _swig_property(_pyCrazyCPP.attrib_t_normals_get, _pyCrazyCPP.attrib_t_normals_set)
    __swig_setmethods__["texcoords"] = _pyCrazyCPP.attrib_t_texcoords_set
    __swig_getmethods__["texcoords"] = _pyCrazyCPP.attrib_t_texcoords_get
    if _newclass:
        texcoords = _swig_property(_pyCrazyCPP.attrib_t_texcoords_get, _pyCrazyCPP.attrib_t_texcoords_set)
    __swig_setmethods__["colors"] = _pyCrazyCPP.attrib_t_colors_set
    __swig_getmethods__["colors"] = _pyCrazyCPP.attrib_t_colors_get
    if _newclass:
        colors = _swig_property(_pyCrazyCPP.attrib_t_colors_get, _pyCrazyCPP.attrib_t_colors_set)

    def __init__(self):
        this = _pyCrazyCPP.new_attrib_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_attrib_t
    __del__ = lambda self: None
attrib_t_swigregister = _pyCrazyCPP.attrib_t_swigregister
attrib_t_swigregister(attrib_t)

class callback_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, callback_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, callback_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertex_cb"] = _pyCrazyCPP.callback_t_vertex_cb_set
    __swig_getmethods__["vertex_cb"] = _pyCrazyCPP.callback_t_vertex_cb_get
    if _newclass:
        vertex_cb = _swig_property(_pyCrazyCPP.callback_t_vertex_cb_get, _pyCrazyCPP.callback_t_vertex_cb_set)
    __swig_setmethods__["normal_cb"] = _pyCrazyCPP.callback_t_normal_cb_set
    __swig_getmethods__["normal_cb"] = _pyCrazyCPP.callback_t_normal_cb_get
    if _newclass:
        normal_cb = _swig_property(_pyCrazyCPP.callback_t_normal_cb_get, _pyCrazyCPP.callback_t_normal_cb_set)
    __swig_setmethods__["texcoord_cb"] = _pyCrazyCPP.callback_t_texcoord_cb_set
    __swig_getmethods__["texcoord_cb"] = _pyCrazyCPP.callback_t_texcoord_cb_get
    if _newclass:
        texcoord_cb = _swig_property(_pyCrazyCPP.callback_t_texcoord_cb_get, _pyCrazyCPP.callback_t_texcoord_cb_set)
    __swig_setmethods__["index_cb"] = _pyCrazyCPP.callback_t_index_cb_set
    __swig_getmethods__["index_cb"] = _pyCrazyCPP.callback_t_index_cb_get
    if _newclass:
        index_cb = _swig_property(_pyCrazyCPP.callback_t_index_cb_get, _pyCrazyCPP.callback_t_index_cb_set)
    __swig_setmethods__["usemtl_cb"] = _pyCrazyCPP.callback_t_usemtl_cb_set
    __swig_getmethods__["usemtl_cb"] = _pyCrazyCPP.callback_t_usemtl_cb_get
    if _newclass:
        usemtl_cb = _swig_property(_pyCrazyCPP.callback_t_usemtl_cb_get, _pyCrazyCPP.callback_t_usemtl_cb_set)
    __swig_setmethods__["mtllib_cb"] = _pyCrazyCPP.callback_t_mtllib_cb_set
    __swig_getmethods__["mtllib_cb"] = _pyCrazyCPP.callback_t_mtllib_cb_get
    if _newclass:
        mtllib_cb = _swig_property(_pyCrazyCPP.callback_t_mtllib_cb_get, _pyCrazyCPP.callback_t_mtllib_cb_set)
    __swig_setmethods__["group_cb"] = _pyCrazyCPP.callback_t_group_cb_set
    __swig_getmethods__["group_cb"] = _pyCrazyCPP.callback_t_group_cb_get
    if _newclass:
        group_cb = _swig_property(_pyCrazyCPP.callback_t_group_cb_get, _pyCrazyCPP.callback_t_group_cb_set)
    __swig_setmethods__["object_cb"] = _pyCrazyCPP.callback_t_object_cb_set
    __swig_getmethods__["object_cb"] = _pyCrazyCPP.callback_t_object_cb_get
    if _newclass:
        object_cb = _swig_property(_pyCrazyCPP.callback_t_object_cb_get, _pyCrazyCPP.callback_t_object_cb_set)

    def __init__(self):
        this = _pyCrazyCPP.new_callback_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_callback_t
    __del__ = lambda self: None
callback_t_swigregister = _pyCrazyCPP.callback_t_swigregister
callback_t_swigregister(callback_t)

class MaterialReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyCrazyCPP.delete_MaterialReader
    __del__ = lambda self: None

    def __call__(self, matId, materials, matMap, err):
        return _pyCrazyCPP.MaterialReader___call__(self, matId, materials, matMap, err)
MaterialReader_swigregister = _pyCrazyCPP.MaterialReader_swigregister
MaterialReader_swigregister(MaterialReader)

class MaterialFileReader(MaterialReader):
    __swig_setmethods__ = {}
    for _s in [MaterialReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialFileReader, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialFileReader, name)
    __repr__ = _swig_repr

    def __init__(self, mtl_basedir):
        this = _pyCrazyCPP.new_MaterialFileReader(mtl_basedir)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_MaterialFileReader
    __del__ = lambda self: None

    def __call__(self, matId, materials, matMap, err):
        return _pyCrazyCPP.MaterialFileReader___call__(self, matId, materials, matMap, err)
MaterialFileReader_swigregister = _pyCrazyCPP.MaterialFileReader_swigregister
MaterialFileReader_swigregister(MaterialFileReader)

class MaterialStreamReader(MaterialReader):
    __swig_setmethods__ = {}
    for _s in [MaterialReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialStreamReader, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialStreamReader, name)
    __repr__ = _swig_repr

    def __init__(self, inStream):
        this = _pyCrazyCPP.new_MaterialStreamReader(inStream)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_MaterialStreamReader
    __del__ = lambda self: None

    def __call__(self, matId, materials, matMap, err):
        return _pyCrazyCPP.MaterialStreamReader___call__(self, matId, materials, matMap, err)
MaterialStreamReader_swigregister = _pyCrazyCPP.MaterialStreamReader_swigregister
MaterialStreamReader_swigregister(MaterialStreamReader)


def LoadObjWithCallback(inStream, callback, user_data=None, readMatFn=None, err=None):
    return _pyCrazyCPP.LoadObjWithCallback(inStream, callback, user_data, readMatFn, err)
LoadObjWithCallback = _pyCrazyCPP.LoadObjWithCallback

def LoadObj(*args):
    return _pyCrazyCPP.LoadObj(*args)
LoadObj = _pyCrazyCPP.LoadObj

def LoadMtl(material_map, materials, inStream, warning):
    return _pyCrazyCPP.LoadMtl(material_map, materials, inStream, warning)
LoadMtl = _pyCrazyCPP.LoadMtl
class BaseOperator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseOperator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseOperator, name)
    __repr__ = _swig_repr

    def Compute_Face_Vertices_Normals(self, v, f, scale, flag=0):
        return _pyCrazyCPP.BaseOperator_Compute_Face_Vertices_Normals(self, v, f, scale, flag)

    def SelectTrangleVertices(self, src_mesh, src_face_ids, dst_mesh):
        return _pyCrazyCPP.BaseOperator_SelectTrangleVertices(self, src_mesh, src_face_ids, dst_mesh)
    __swig_getmethods__["_ComputeNormalVector"] = lambda x: _pyCrazyCPP.BaseOperator__ComputeNormalVector
    if _newclass:
        _ComputeNormalVector = staticmethod(_pyCrazyCPP.BaseOperator__ComputeNormalVector)
    __swig_getmethods__["_Compute_Face_Vertices_Normals"] = lambda x: _pyCrazyCPP.BaseOperator__Compute_Face_Vertices_Normals
    if _newclass:
        _Compute_Face_Vertices_Normals = staticmethod(_pyCrazyCPP.BaseOperator__Compute_Face_Vertices_Normals)
    __swig_getmethods__["_NormalizeVertices"] = lambda x: _pyCrazyCPP.BaseOperator__NormalizeVertices
    if _newclass:
        _NormalizeVertices = staticmethod(_pyCrazyCPP.BaseOperator__NormalizeVertices)
    __swig_getmethods__["_SelectTrangleVertices2Map"] = lambda x: _pyCrazyCPP.BaseOperator__SelectTrangleVertices2Map
    if _newclass:
        _SelectTrangleVertices2Map = staticmethod(_pyCrazyCPP.BaseOperator__SelectTrangleVertices2Map)
    __swig_getmethods__["_SelectTrangleVertices2DMat"] = lambda x: _pyCrazyCPP.BaseOperator__SelectTrangleVertices2DMat
    if _newclass:
        _SelectTrangleVertices2DMat = staticmethod(_pyCrazyCPP.BaseOperator__SelectTrangleVertices2DMat)

    def __init__(self):
        this = _pyCrazyCPP.new_BaseOperator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_BaseOperator
    __del__ = lambda self: None
BaseOperator_swigregister = _pyCrazyCPP.BaseOperator_swigregister
BaseOperator_swigregister(BaseOperator)

def BaseOperator__ComputeNormalVector(p1, p2, p3):
    return _pyCrazyCPP.BaseOperator__ComputeNormalVector(p1, p2, p3)
BaseOperator__ComputeNormalVector = _pyCrazyCPP.BaseOperator__ComputeNormalVector

def BaseOperator__Compute_Face_Vertices_Normals(mesh, scale=1.0, flag=1):
    return _pyCrazyCPP.BaseOperator__Compute_Face_Vertices_Normals(mesh, scale, flag)
BaseOperator__Compute_Face_Vertices_Normals = _pyCrazyCPP.BaseOperator__Compute_Face_Vertices_Normals

def BaseOperator__NormalizeVertices(mesh, scale=1.0):
    return _pyCrazyCPP.BaseOperator__NormalizeVertices(mesh, scale)
BaseOperator__NormalizeVertices = _pyCrazyCPP.BaseOperator__NormalizeVertices

def BaseOperator__SelectTrangleVertices2Map(src_mesh, src_face_ids, dst_mesh):
    return _pyCrazyCPP.BaseOperator__SelectTrangleVertices2Map(src_mesh, src_face_ids, dst_mesh)
BaseOperator__SelectTrangleVertices2Map = _pyCrazyCPP.BaseOperator__SelectTrangleVertices2Map

def BaseOperator__SelectTrangleVertices2DMat(src_mesh, src_face_ids, dst_mesh):
    return _pyCrazyCPP.BaseOperator__SelectTrangleVertices2DMat(src_mesh, src_face_ids, dst_mesh)
BaseOperator__SelectTrangleVertices2DMat = _pyCrazyCPP.BaseOperator__SelectTrangleVertices2DMat

class CrossDatum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossDatum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrossDatum, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ViewMatrix"] = _pyCrazyCPP.CrossDatum_ViewMatrix_set
    __swig_getmethods__["ViewMatrix"] = _pyCrazyCPP.CrossDatum_ViewMatrix_get
    if _newclass:
        ViewMatrix = _swig_property(_pyCrazyCPP.CrossDatum_ViewMatrix_get, _pyCrazyCPP.CrossDatum_ViewMatrix_set)
    __swig_setmethods__["mouse"] = _pyCrazyCPP.CrossDatum_mouse_set
    __swig_getmethods__["mouse"] = _pyCrazyCPP.CrossDatum_mouse_get
    if _newclass:
        mouse = _swig_property(_pyCrazyCPP.CrossDatum_mouse_get, _pyCrazyCPP.CrossDatum_mouse_set)
    __swig_setmethods__["win_height"] = _pyCrazyCPP.CrossDatum_win_height_set
    __swig_getmethods__["win_height"] = _pyCrazyCPP.CrossDatum_win_height_get
    if _newclass:
        win_height = _swig_property(_pyCrazyCPP.CrossDatum_win_height_get, _pyCrazyCPP.CrossDatum_win_height_set)
    __swig_setmethods__["win_width"] = _pyCrazyCPP.CrossDatum_win_width_set
    __swig_getmethods__["win_width"] = _pyCrazyCPP.CrossDatum_win_width_get
    if _newclass:
        win_width = _swig_property(_pyCrazyCPP.CrossDatum_win_width_get, _pyCrazyCPP.CrossDatum_win_width_set)

    def CheckBox(self, cmd):
        return _pyCrazyCPP.CrossDatum_CheckBox(self, cmd)

    def CheckSwitchBox(self, cmd, state):
        return _pyCrazyCPP.CrossDatum_CheckSwitchBox(self, cmd, state)

    def CheckSwitch(self, cmd):
        return _pyCrazyCPP.CrossDatum_CheckSwitch(self, cmd)

    def CheckButton(self, cmd):
        return _pyCrazyCPP.CrossDatum_CheckButton(self, cmd)

    def GetData(self, cmd):
        return _pyCrazyCPP.CrossDatum_GetData(self, cmd)

    def CheckMouseButton(self, cmd):
        return _pyCrazyCPP.CrossDatum_CheckMouseButton(self, cmd)

    def GetMousePosition(self, cmd):
        return _pyCrazyCPP.CrossDatum_GetMousePosition(self, cmd)

    def SetBox(self, cmd, state):
        return _pyCrazyCPP.CrossDatum_SetBox(self, cmd, state)

    def SetButton(self, cmd, state):
        return _pyCrazyCPP.CrossDatum_SetButton(self, cmd, state)

    def SetData(self, cmd, data):
        return _pyCrazyCPP.CrossDatum_SetData(self, cmd, data)

    def InsertBox(self, cmd, state):
        return _pyCrazyCPP.CrossDatum_InsertBox(self, cmd, state)

    def InsertButton(self, cmd, state):
        return _pyCrazyCPP.CrossDatum_InsertButton(self, cmd, state)

    def InsertData(self, cmd, data):
        return _pyCrazyCPP.CrossDatum_InsertData(self, cmd, data)

    def __init__(self):
        this = _pyCrazyCPP.new_CrossDatum()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_CrossDatum
    __del__ = lambda self: None
CrossDatum_swigregister = _pyCrazyCPP.CrossDatum_swigregister
CrossDatum_swigregister(CrossDatum)

class Timer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyCrazyCPP.new_Timer()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_Timer
    __del__ = lambda self: None

    def start(self):
        return _pyCrazyCPP.Timer_start(self)

    def stop(self):
        return _pyCrazyCPP.Timer_stop(self)

    def getElapsedTime(self):
        return _pyCrazyCPP.Timer_getElapsedTime(self)

    def getElapsedTimeInSec(self):
        return _pyCrazyCPP.Timer_getElapsedTimeInSec(self)

    def getElapsedTimeInMilliSec(self):
        return _pyCrazyCPP.Timer_getElapsedTimeInMilliSec(self)

    def getElapsedTimeInMicroSec(self):
        return _pyCrazyCPP.Timer_getElapsedTimeInMicroSec(self)
Timer_swigregister = _pyCrazyCPP.Timer_swigregister
Timer_swigregister(Timer)

class config_parameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, config_parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, config_parameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["panel"] = _pyCrazyCPP.config_parameters_panel_set
    __swig_getmethods__["panel"] = _pyCrazyCPP.config_parameters_panel_get
    if _newclass:
        panel = _swig_property(_pyCrazyCPP.config_parameters_panel_get, _pyCrazyCPP.config_parameters_panel_set)
    __swig_setmethods__["fullScreen"] = _pyCrazyCPP.config_parameters_fullScreen_set
    __swig_getmethods__["fullScreen"] = _pyCrazyCPP.config_parameters_fullScreen_get
    if _newclass:
        fullScreen = _swig_property(_pyCrazyCPP.config_parameters_fullScreen_get, _pyCrazyCPP.config_parameters_fullScreen_set)
    __swig_setmethods__["WithPanel"] = _pyCrazyCPP.config_parameters_WithPanel_set
    __swig_getmethods__["WithPanel"] = _pyCrazyCPP.config_parameters_WithPanel_get
    if _newclass:
        WithPanel = _swig_property(_pyCrazyCPP.config_parameters_WithPanel_get, _pyCrazyCPP.config_parameters_WithPanel_set)
    __swig_setmethods__["width"] = _pyCrazyCPP.config_parameters_width_set
    __swig_getmethods__["width"] = _pyCrazyCPP.config_parameters_width_get
    if _newclass:
        width = _swig_property(_pyCrazyCPP.config_parameters_width_get, _pyCrazyCPP.config_parameters_width_set)
    __swig_setmethods__["height"] = _pyCrazyCPP.config_parameters_height_set
    __swig_getmethods__["height"] = _pyCrazyCPP.config_parameters_height_get
    if _newclass:
        height = _swig_property(_pyCrazyCPP.config_parameters_height_get, _pyCrazyCPP.config_parameters_height_set)
    __swig_setmethods__["cam_fx"] = _pyCrazyCPP.config_parameters_cam_fx_set
    __swig_getmethods__["cam_fx"] = _pyCrazyCPP.config_parameters_cam_fx_get
    if _newclass:
        cam_fx = _swig_property(_pyCrazyCPP.config_parameters_cam_fx_get, _pyCrazyCPP.config_parameters_cam_fx_set)
    __swig_setmethods__["cam_fy"] = _pyCrazyCPP.config_parameters_cam_fy_set
    __swig_getmethods__["cam_fy"] = _pyCrazyCPP.config_parameters_cam_fy_get
    if _newclass:
        cam_fy = _swig_property(_pyCrazyCPP.config_parameters_cam_fy_get, _pyCrazyCPP.config_parameters_cam_fy_set)
    __swig_setmethods__["cam_zNear"] = _pyCrazyCPP.config_parameters_cam_zNear_set
    __swig_getmethods__["cam_zNear"] = _pyCrazyCPP.config_parameters_cam_zNear_get
    if _newclass:
        cam_zNear = _swig_property(_pyCrazyCPP.config_parameters_cam_zNear_get, _pyCrazyCPP.config_parameters_cam_zNear_set)
    __swig_setmethods__["cam_zFar"] = _pyCrazyCPP.config_parameters_cam_zFar_set
    __swig_getmethods__["cam_zFar"] = _pyCrazyCPP.config_parameters_cam_zFar_get
    if _newclass:
        cam_zFar = _swig_property(_pyCrazyCPP.config_parameters_cam_zFar_get, _pyCrazyCPP.config_parameters_cam_zFar_set)
    __swig_setmethods__["draw_mode"] = _pyCrazyCPP.config_parameters_draw_mode_set
    __swig_getmethods__["draw_mode"] = _pyCrazyCPP.config_parameters_draw_mode_get
    if _newclass:
        draw_mode = _swig_property(_pyCrazyCPP.config_parameters_draw_mode_get, _pyCrazyCPP.config_parameters_draw_mode_set)
    __swig_setmethods__["render_mode"] = _pyCrazyCPP.config_parameters_render_mode_set
    __swig_getmethods__["render_mode"] = _pyCrazyCPP.config_parameters_render_mode_get
    if _newclass:
        render_mode = _swig_property(_pyCrazyCPP.config_parameters_render_mode_get, _pyCrazyCPP.config_parameters_render_mode_set)
    __swig_setmethods__["GUI_BUTTON"] = _pyCrazyCPP.config_parameters_GUI_BUTTON_set
    __swig_getmethods__["GUI_BUTTON"] = _pyCrazyCPP.config_parameters_GUI_BUTTON_get
    if _newclass:
        GUI_BUTTON = _swig_property(_pyCrazyCPP.config_parameters_GUI_BUTTON_get, _pyCrazyCPP.config_parameters_GUI_BUTTON_set)
    __swig_setmethods__["GUI_CHECKBOX"] = _pyCrazyCPP.config_parameters_GUI_CHECKBOX_set
    __swig_getmethods__["GUI_CHECKBOX"] = _pyCrazyCPP.config_parameters_GUI_CHECKBOX_get
    if _newclass:
        GUI_CHECKBOX = _swig_property(_pyCrazyCPP.config_parameters_GUI_CHECKBOX_get, _pyCrazyCPP.config_parameters_GUI_CHECKBOX_set)
    __swig_setmethods__["GUI_DataBar"] = _pyCrazyCPP.config_parameters_GUI_DataBar_set
    __swig_getmethods__["GUI_DataBar"] = _pyCrazyCPP.config_parameters_GUI_DataBar_get
    if _newclass:
        GUI_DataBar = _swig_property(_pyCrazyCPP.config_parameters_GUI_DataBar_get, _pyCrazyCPP.config_parameters_GUI_DataBar_set)

    def GetDrawMode(self):
        return _pyCrazyCPP.config_parameters_GetDrawMode(self)

    def SetGUI_DataBar(self, name, s, m, e):
        return _pyCrazyCPP.config_parameters_SetGUI_DataBar(self, name, s, m, e)

    def SetGUI_BUTTON(self, name):
        return _pyCrazyCPP.config_parameters_SetGUI_BUTTON(self, name)

    def SetGUI_CHECKBOX(self, name, d):
        return _pyCrazyCPP.config_parameters_SetGUI_CHECKBOX(self, name, d)

    def Clear(self, name):
        return _pyCrazyCPP.config_parameters_Clear(self, name)

    def __init__(self):
        this = _pyCrazyCPP.new_config_parameters()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyCrazyCPP.delete_config_parameters
    __del__ = lambda self: None
config_parameters_swigregister = _pyCrazyCPP.config_parameters_swigregister
config_parameters_swigregister(config_parameters)


def convert_ImageMatrix2CVImage(in_image):
    return _pyCrazyCPP.convert_ImageMatrix2CVImage(in_image)
convert_ImageMatrix2CVImage = _pyCrazyCPP.convert_ImageMatrix2CVImage

def convert_CVImage2ImageMatrix(in_image):
    return _pyCrazyCPP.convert_CVImage2ImageMatrix(in_image)
convert_CVImage2ImageMatrix = _pyCrazyCPP.convert_CVImage2ImageMatrix

def CvtCVMat2DMatrix(mat):
    return _pyCrazyCPP.CvtCVMat2DMatrix(mat)
CvtCVMat2DMatrix = _pyCrazyCPP.CvtCVMat2DMatrix

def CvtDMatrix2CVMat(mat):
    return _pyCrazyCPP.CvtDMatrix2CVMat(mat)
CvtDMatrix2CVMat = _pyCrazyCPP.CvtDMatrix2CVMat

def CvtEigenTriplets2DMatrix(triplet):
    return _pyCrazyCPP.CvtEigenTriplets2DMatrix(triplet)
CvtEigenTriplets2DMatrix = _pyCrazyCPP.CvtEigenTriplets2DMatrix

def CvtDMatrix2EigenTriplets(DMat):
    return _pyCrazyCPP.CvtDMatrix2EigenTriplets(DMat)
CvtDMatrix2EigenTriplets = _pyCrazyCPP.CvtDMatrix2EigenTriplets

def Split(*args):
    return _pyCrazyCPP.Split(*args)
Split = _pyCrazyCPP.Split

def Expand(*args):
    return _pyCrazyCPP.Expand(*args)
Expand = _pyCrazyCPP.Expand

def SanitizePath(path):
    return _pyCrazyCPP.SanitizePath(path)
SanitizePath = _pyCrazyCPP.SanitizePath

def PathParent(path, levels=1):
    return _pyCrazyCPP.PathParent(path, levels)
PathParent = _pyCrazyCPP.PathParent

def FileExists(filename):
    return _pyCrazyCPP.FileExists(filename)
FileExists = _pyCrazyCPP.FileExists

def FindPath(child_path, signature_path):
    return _pyCrazyCPP.FindPath(child_path, signature_path)
FindPath = _pyCrazyCPP.FindPath

def PathExpand(sPath):
    return _pyCrazyCPP.PathExpand(sPath)
PathExpand = _pyCrazyCPP.PathExpand

def MatchesWildcard(str, wildcard):
    return _pyCrazyCPP.MatchesWildcard(str, wildcard)
MatchesWildcard = _pyCrazyCPP.MatchesWildcard

def FilesMatchingWildcard(wildcard_file_path, file_vec):
    return _pyCrazyCPP.FilesMatchingWildcard(wildcard_file_path, file_vec)
FilesMatchingWildcard = _pyCrazyCPP.FilesMatchingWildcard

def MakeUniqueFilename(filename):
    return _pyCrazyCPP.MakeUniqueFilename(filename)
MakeUniqueFilename = _pyCrazyCPP.MakeUniqueFilename

def IsPipe(*args):
    return _pyCrazyCPP.IsPipe(*args)
IsPipe = _pyCrazyCPP.IsPipe

def WritablePipeFileDescriptor(file):
    return _pyCrazyCPP.WritablePipeFileDescriptor(file)
WritablePipeFileDescriptor = _pyCrazyCPP.WritablePipeFileDescriptor

def ReadablePipeFileDescriptor(file):
    return _pyCrazyCPP.ReadablePipeFileDescriptor(file)
ReadablePipeFileDescriptor = _pyCrazyCPP.ReadablePipeFileDescriptor

def PipeHasDataToRead(fd):
    return _pyCrazyCPP.PipeHasDataToRead(fd)
PipeHasDataToRead = _pyCrazyCPP.PipeHasDataToRead

def FlushPipe(file):
    return _pyCrazyCPP.FlushPipe(file)
FlushPipe = _pyCrazyCPP.FlushPipe

def StartsWith(str, prefix):
    return _pyCrazyCPP.StartsWith(str, prefix)
StartsWith = _pyCrazyCPP.StartsWith

def EndsWith(str, prefix):
    return _pyCrazyCPP.EndsWith(str, prefix)
EndsWith = _pyCrazyCPP.EndsWith

def Trim(*args):
    return _pyCrazyCPP.Trim(*args)
Trim = _pyCrazyCPP.Trim

def ToUpper(str):
    return _pyCrazyCPP.ToUpper(str)
ToUpper = _pyCrazyCPP.ToUpper

def ToLower(str):
    return _pyCrazyCPP.ToLower(str)
ToLower = _pyCrazyCPP.ToLower

def ToUpperCopy(str):
    return _pyCrazyCPP.ToUpperCopy(str)
ToUpperCopy = _pyCrazyCPP.ToUpperCopy

def ToLowerCopy(str):
    return _pyCrazyCPP.ToLowerCopy(str)
ToLowerCopy = _pyCrazyCPP.ToLowerCopy

def NUmpyDataCPP2Python(mat, DMat, flags):
    return _pyCrazyCPP.NUmpyDataCPP2Python(mat, DMat, flags)
NUmpyDataCPP2Python = _pyCrazyCPP.NUmpyDataCPP2Python

def ImageMatrixCPP2Python(mat, imgMat, c, flags):
    return _pyCrazyCPP.ImageMatrixCPP2Python(mat, imgMat, c, flags)
ImageMatrixCPP2Python = _pyCrazyCPP.ImageMatrixCPP2Python
# This file is compatible with both classic and new-style classes.


